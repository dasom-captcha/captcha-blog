{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hiero/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/js/my.js","path":"js/my.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/comment-ds.css","path":"css/comment-ds.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/comment-gitment.css","path":"css/comment-gitment.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/glyphs.css","path":"css/glyphs.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/hiero.css","path":"css/hiero.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/vdonate.css","path":"css/vdonate.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/preview/browser-support.png","path":"preview/browser-support.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/js/scripts.js","path":"js/scripts.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/js/vdonate.js","path":"js/vdonate.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/fonts/athemes-glyphs.woff","path":"css/fonts/athemes-glyphs.woff","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/preview/Hiero_home.png","path":"preview/Hiero_home.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/preview/logo-preview.jpg","path":"preview/logo-preview.jpg","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hiero/source/preview/mobile-preview.png","path":"preview/mobile-preview.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/css/images/pose.jpg","path":"css/images/pose.jpg","modified":0,"renderable":1},{"_id":"themes/hiero/source/preview/code-default-preview.png","path":"preview/code-default-preview.png","modified":0,"renderable":1},{"_id":"themes/hiero/source/preview/code-theme.jpg","path":"preview/code-theme.jpg","modified":0,"renderable":1},{"_id":"source/pdf/Git.pdf","path":"pdf/Git.pdf","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hiero/.gitignore","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554363067693},{"_id":"themes/hiero/.travis.yml","hash":"7ed5eb33c899eb49ec323f7ed7ee431bea52bf4f","modified":1554344141486},{"_id":"themes/hiero/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1554344141486},{"_id":"themes/hiero/LICENSE","hash":"53bb975b001b0d0bb2ddd7c302a9c8a20195f0be","modified":1554344141486},{"_id":"themes/hiero/README.cn.md","hash":"b477baf18542914e5ea05e4de6915bbd82b52bf8","modified":1554344141486},{"_id":"themes/hiero/package.json","hash":"5eaf2d3c5bc2a8d9fd503e2daed9c97333585d04","modified":1554344141502},{"_id":"themes/hiero/README.md","hash":"0d8eb552e0ad1edadb95c671a50d866b922eed4a","modified":1554344141486},{"_id":"themes/hiero/_config.yml","hash":"224eb467c43ed1311eff2539304a74f5b59ae251","modified":1554355858584},{"_id":"source/_posts/02-Hexo.md","hash":"9cc522cf3925f9c99453d6080c3bbbc772395f00","modified":1554355511739},{"_id":"source/_posts/02-Numpy.md","hash":"e461f26e5e16c49932281a9d28c482dc645ae4ed","modified":1554353166615},{"_id":"source/_posts/01-Kim-Git.md","hash":"d388dd040eaad7151779886c5e6fe9ae5c280a37","modified":1554354397149},{"_id":"source/_posts/03-BaekShin-Git.md","hash":"3425cb768773063bcba43fb2fba29147fcdbac0e","modified":1554369515659},{"_id":"source/_posts/03-Hexo.md","hash":"9ad2361e22363c74c0035a032dbd9dcbcf99fa43","modified":1554366019030},{"_id":"source/_posts/01-Pandas.md","hash":"a24df8edf5d4d09aa50827bc933a55caf334ba58","modified":1554353135237},{"_id":"source/_posts/02-Park-Git.md","hash":"3d0cfaaed6d849cf4cfdd95c1b5d368eaceaad44","modified":1554357158723},{"_id":"themes/hiero/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1554344141486},{"_id":"source/_posts/01-Hexo.md","hash":"2c0ec5a54149a5f4126712c51278c68aa073978c","modified":1554354472936},{"_id":"themes/hiero/languages/en.yml","hash":"351229288141e945d3c84b8c236c757b0d3e0897","modified":1554344141486},{"_id":"themes/hiero/languages/default.yml","hash":"351229288141e945d3c84b8c236c757b0d3e0897","modified":1554344141486},{"_id":"themes/hiero/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1554344141486},{"_id":"themes/hiero/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1554344141486},{"_id":"themes/hiero/languages/es.yml","hash":"8a185122a8968ae3e3ae850bb5569084ba0c0afd","modified":1554344141486},{"_id":"themes/hiero/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1554344141486},{"_id":"themes/hiero/languages/pt.yml","hash":"0ec64b7e134e802846125770782fab9590495bcd","modified":1554344141486},{"_id":"themes/hiero/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1554344141486},{"_id":"themes/hiero/languages/zh-TW.yml","hash":"52976395ec52ac43de546958300ec297fe4e8ccc","modified":1554344141486},{"_id":"themes/hiero/layout/archive.ejs","hash":"97043b4761d9193f0c5836d093f26c3087c9c55c","modified":1554344141502},{"_id":"themes/hiero/languages/zh-CN.yml","hash":"9ef338e83089de55a9a67cf10dbe9d940f4db395","modified":1554344141486},{"_id":"themes/hiero/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1554344141502},{"_id":"themes/hiero/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554344141502},{"_id":"themes/hiero/layout/categories.ejs","hash":"a94bafe10d9f4b1fe42c0d586c9606a5c0ce3ea4","modified":1554344141502},{"_id":"themes/hiero/layout/layout.ejs","hash":"b0f554af2eca7e36ec4fcfaa776bb69fbceffc91","modified":1554344141502},{"_id":"themes/hiero/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554344141502},{"_id":"themes/hiero/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554344141502},{"_id":"themes/hiero/layout/tags.ejs","hash":"2ecf18cf840207c5688af0be0ded77e770661037","modified":1554344141502},{"_id":"themes/hiero/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1554344141518},{"_id":"themes/hiero/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554344141502},{"_id":"themes/hiero/scripts/hierarchical-categories.js","hash":"d06470bcfd09777b056e34d6b0895d2c672bd58a","modified":1554344141518},{"_id":"themes/hiero/source/css/my.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554350574969},{"_id":"themes/hiero/source/js/my.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554350578728},{"_id":"source/_posts/captcha-solver-study.md","hash":"ef28822728deefd970de68ab6f38fed2208bd81a","modified":1554352198014},{"_id":"source/_posts/03-BaekShin-Git/ff1.png","hash":"d2b169aa99a97b4ba559440301999dbe47363c80","modified":1554367755189},{"_id":"source/_posts/03-BaekShin-Git/ff2.png","hash":"8a8f8686b44650b3f0a7949ac9f811fef489dc4a","modified":1554367759899},{"_id":"source/_posts/03-BaekShin-Git/ff3.png","hash":"03a96b68465d8fc48111628881c062a257111b34","modified":1554367786053},{"_id":"source/_posts/03-BaekShin-Git/nff.png","hash":"99f365c0dddbfc54ce7b11b24d6836b1e2826481","modified":1554367791632},{"_id":"source/_posts/03-Hexo/cap1.PNG","hash":"59d070904dec19ff8741085c3dd97e2d8a4de754","modified":1554365458806},{"_id":"source/_posts/03-Hexo/cap2.PNG","hash":"57b07e5f2a139fdaa5560b48d00afd15fe606cdb","modified":1554365668313},{"_id":"source/_posts/03-Hexo/cap3.PNG","hash":"4c95e67f606c542902b3e7a2d1ab7cd18a229bea","modified":1554365760357},{"_id":"source/_posts/03-Hexo/cap4.PNG","hash":"086b1680465b8d2465bb1aea277fbac9d98047f7","modified":1554365782723},{"_id":"source/_posts/03-Hexo/cap5.PNG","hash":"5627e7f6818376fe64bdc0fd1f05eea7ee98492f","modified":1554365934874},{"_id":"source/_posts/03-Hexo/cap6.PNG","hash":"5dc71cf0d7478fab7998d9af295070094aa51dfa","modified":1554365947620},{"_id":"themes/hiero/layout/_partial/archive-post.ejs","hash":"f380e5459a043979e0c7429dcf33f20302631214","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/after-footer.ejs","hash":"de51f9c48746bfba27cde31cb2057220f47183ea","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/baidu-analytics.ejs","hash":"335749b60b4274d9751bac8baf39d69f424930fd","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/cnzz-analytics.ejs","hash":"b340ae5f2b7550ff1eb771904bc374e09b6880b0","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/busuanzi-analytics.ejs","hash":"a944a540fff0d7bfb5fd6ca81d34624f1d6b2ea2","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/article.ejs","hash":"1bd968f0d6ff40488ccac6a0030711a7e60856b1","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/donate.ejs","hash":"ce2dc1ca23cc12a6b91651aaf7845508ab95832f","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/facebook-sdk.ejs","hash":"8fc5cf7abbfd587057fb86ee028c7f216d30d68c","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/archive.ejs","hash":"62ff097c313c1b87724c9916ec3fd44545b56d35","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/header-post.ejs","hash":"2ae1c7b11cf95480cc62d93d981cc46ee352925c","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/jsHelper.ejs","hash":"adb6c50f7b53d7f6e88fb7fd18ace0d054087929","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/tencent-analytics.ejs","hash":"6a50e6fe7701ff131b2fc0c066a4615dd2a37da7","modified":1554344141502},{"_id":"themes/hiero/layout/_widget/archive.ejs","hash":"856a6352a0f8d55f3d2965eea8ad4ec517f6af96","modified":1554344141502},{"_id":"themes/hiero/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1554344141502},{"_id":"themes/hiero/layout/_widget/recent_posts.ejs","hash":"b8d29ab002e7fa855f4322dccc6546841eaecd80","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/head.ejs","hash":"9aed41c53ef00a743c2bb88d76aa9b21db790659","modified":1554352057832},{"_id":"themes/hiero/layout/_widget/search.ejs","hash":"77960bc8969dc0c5a341a239130f8d181442de03","modified":1554344141502},{"_id":"themes/hiero/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1554344141502},{"_id":"themes/hiero/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1554344141502},{"_id":"themes/hiero/layout/search/baidu.ejs","hash":"bee2184ed56871cdd4eed38cb0802a07dd4e5191","modified":1554344141502},{"_id":"themes/hiero/layout/search/index.ejs","hash":"4a63d4f702fd5c8a0dbf4030ef313a75926424af","modified":1554344141502},{"_id":"themes/hiero/layout/_widget/social.ejs","hash":"5719baf6cee0ddd97a0a61351d5d107257531504","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/footer.ejs","hash":"b691781422444a098c5138b7c6aced7ba4e794d1","modified":1554355654487},{"_id":"themes/hiero/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1554344141502},{"_id":"themes/hiero/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1554344141502},{"_id":"themes/hiero/layout/search/insight.ejs","hash":"11a07a4ea37b64e36a85f1f8889cce00c5979e1f","modified":1554344141502},{"_id":"themes/hiero/source/css/comment-ds.css","hash":"06f65a714265aa6d6e5d88fc371add1aa0cf8cb7","modified":1554344141518},{"_id":"themes/hiero/source/css/_variables.styl","hash":"6f54ab92d25b2207c8d3d58987475269db8f334f","modified":1554344141518},{"_id":"themes/hiero/source/css/comment-gitment.css","hash":"f0afe10cac4ae779d442d7459de5bb67372da971","modified":1554344141518},{"_id":"themes/hiero/source/css/glyphs.css","hash":"788c8d61a24dcdbaa9d8026a18fb19fbb27dcd4d","modified":1554344141518},{"_id":"themes/hiero/layout/_partial/comment.ejs","hash":"8d34e1c746c58441d9670e7fcf2faec1dede03d0","modified":1554355088893},{"_id":"themes/hiero/source/css/style.styl","hash":"c43b118baab46850cc99933f5a04ce41373e7ec8","modified":1554344141533},{"_id":"themes/hiero/source/css/hiero.css","hash":"12d3582928b5a79108c8fe54177603fc237a34c9","modified":1554344141518},{"_id":"themes/hiero/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554344141533},{"_id":"themes/hiero/source/css/_extend.styl","hash":"e3bb9a6ec8b2c2341e97e92e5d92b106651d7144","modified":1554344141518},{"_id":"themes/hiero/source/css/vdonate.css","hash":"b43acd89a3d87725d6496a4f780dcf5eb576f866","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554344141533},{"_id":"themes/hiero/source/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1554344141533},{"_id":"themes/hiero/source/js/totop.js","hash":"e9f388666901f97a601d2f3e44eb246413e5db9e","modified":1554344141533},{"_id":"themes/hiero/source/js/main.js","hash":"c6daf29e1ec12b6f7bc1b4fdec3fc01bdeae1998","modified":1554344141533},{"_id":"themes/hiero/source/css/_partial/footer.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/header-post.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/header.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554344141518},{"_id":"themes/hiero/source/js/scripts.js","hash":"a0780585cbe85bf1d8367ff68279b0fe461acd37","modified":1554344141533},{"_id":"themes/hiero/source/js/insight.js","hash":"a69c9f5aecea2eae8f740b5857ee28694609373d","modified":1554344141533},{"_id":"source/_posts/01-Kim-Git/1.png","hash":"f6f955a6175679cfc9344e37e0d5895e25492291","modified":1554353988878},{"_id":"themes/hiero/layout/_partial/post/busuanzi-analytics.ejs","hash":"9bb221cbe3998dee7a75211577a68dc974fb660d","modified":1554350467746},{"_id":"themes/hiero/layout/_partial/post/category.ejs","hash":"f60d3c9a0943b8af97b1a8a82be0addf46cda1d9","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/post/gallery.ejs","hash":"bfde040b4c4a8ce43645e0783cdd2b944269ec80","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/post/date.ejs","hash":"c176e681c1586f12606c7d350b0bdc615e633aa1","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/post/mathjax.ejs","hash":"b670bc52c3dbc5ca0216959ccd8cc2c6e1808446","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/post/tag.ejs","hash":"22a3580e569cb6a616d6817e32075759c6554801","modified":1554344141502},{"_id":"themes/hiero/layout/_partial/post/title.ejs","hash":"9ee31f67ad337d5dcaaa10aa8ba55c7c22074b1c","modified":1554344141502},{"_id":"themes/hiero/source/js/vdonate.js","hash":"486acb69f773554cdb96761990bb2492e2267858","modified":1554357409996},{"_id":"themes/hiero/source/css/_partial/archive.styl","hash":"0ff4b7d6bfe35cc575aadccf3f568c262ce523e6","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/comment.styl","hash":"43279aaaa00cc07b4a65b13ef01c391355e82717","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/article.styl","hash":"df0e7fb20ed04945f74babc783ec52d9e1151148","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/highlight.styl","hash":"57f33b0c54643204a2a0158d64108f01c28a0f27","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/mobile.styl","hash":"3920e4c3cd11f294d3e7835ed628f169cbea6b21","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/insight.styl","hash":"cd0d114695779df632cc8fa856837303e2052ef2","modified":1554344141518},{"_id":"themes/hiero/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1554344141518},{"_id":"themes/hiero/source/css/_partial/sidebar-aside.styl","hash":"cef960740150ee3a8eed84e8e44ec9351474834d","modified":1554344141518},{"_id":"source/_posts/01-Kim-Git/2.png","hash":"82c5a330ee3f7d8b6535835a6b25dc378ae35a36","modified":1554353988880},{"_id":"themes/hiero/source/css/fonts/athemes-glyphs.woff","hash":"f1ac9ffcc97571ceff48b68792c34de97bc289c0","modified":1554344141518},{"_id":"themes/hiero/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1554344141518},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1554344141518},{"_id":"themes/hiero/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1554344141518},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1554344141518},{"_id":"themes/hiero/source/css/images/favicon.ico","hash":"277372f07132304ea7933196b9cfa07fd23fa603","modified":1554344141518},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1554344141533},{"_id":"themes/hiero/source/preview/Hiero_home.png","hash":"7b430bf82a3f8f4194bac272822ed697e976117f","modified":1554344141533},{"_id":"themes/hiero/source/preview/logo-preview.jpg","hash":"18ec270e302e6870953bb59bf57052cd663659ec","modified":1554344141549},{"_id":"source/_posts/01-Kim-Git/3.png","hash":"58765da58df60a5c3cb686d2586fb14be7b08194","modified":1554353988883},{"_id":"themes/hiero/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1554344141533},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1554344141533},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1554344141518},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1554344141518},{"_id":"themes/hiero/source/preview/mobile-preview.png","hash":"daa8cec3fdae123d97dd9893502e138a3779535e","modified":1554344141549},{"_id":"themes/hiero/source/css/images/pose.jpg","hash":"e8dcdb6e03bd02d831bae593feccb7028c9dc5e9","modified":1554344141533},{"_id":"themes/hiero/source/preview/code-default-preview.png","hash":"0862313cb73a498155d72aa2fa309470b12bf0cd","modified":1554344141549},{"_id":"themes/hiero/source/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1554344141549},{"_id":"source/pdf/Git.pdf","hash":"00913f1b63a800ae9610d7c4ad9763560413cb47","modified":1554353874634},{"_id":"source/_posts/02-Park-Git/Git.pdf","hash":"00913f1b63a800ae9610d7c4ad9763560413cb47","modified":1554353874634},{"_id":"source/_posts/03-BaekShin-Git/example1.png","hash":"9a9c62b50863bfeef04e2e5ee56de6404527ab4c","modified":1554369321985},{"_id":"source/_posts/03-BaekShin-Git/ff4.png","hash":"6dad94ae1d64b26e96538cffd3e637b79e11f972","modified":1554368450053},{"_id":"source/_posts/03-BaekShin-Git/merge.png","hash":"fdc0e392a02f875082c169929bdfe7b6ea0cab36","modified":1554369347392},{"_id":"source/_posts/03-BaekShin-Git/rebase.png","hash":"d75bec091454593a965ed07e91ab315dfaf1168a","modified":1554369363133},{"_id":"public/content.json","hash":"d08a0d1b4a63a7c2cdbbf0ef6211e9d239b5426e","modified":1554369655914},{"_id":"public/2019/04/04/02-Hexo/index.html","hash":"0b157794bf0de795413dbe1f7aadd86f815ca54e","modified":1554369656130},{"_id":"public/categories/Hexo/index.html","hash":"b46265b80a87e780264d5758ac6fe5d83295e4b0","modified":1554369656130},{"_id":"public/categories/Python/index.html","hash":"375983fba26e3db820167bc0ecd427bb6c001b05","modified":1554369656130},{"_id":"public/categories/Git/index.html","hash":"62d0d51bd072eb89a146194d815bd8c18bfe7f38","modified":1554369656130},{"_id":"public/tags/Python/index.html","hash":"43bb6dbb126842fc910b264c7a400b5a0f470001","modified":1554369656130},{"_id":"public/tags/Git/index.html","hash":"f640e53bd6eba1ead09f05eecb91ffe8cf74d1fd","modified":1554369656131},{"_id":"public/tags/Hexo/index.html","hash":"ab0af925c673f28e8cf03ad7282dd64060f0f72b","modified":1554369656131},{"_id":"public/2019/04/04/03-Hexo/index.html","hash":"bf3be35f6b08f6978b726cb64366d2d78c3e4bab","modified":1554369656131},{"_id":"public/2019/04/04/03-BaekShin-Git/index.html","hash":"e4dadd743bd2d2cb55c8fd31abf3c61c8d2b4aa1","modified":1554369656131},{"_id":"public/2019/04/04/01-Hexo/index.html","hash":"edb36608d531a57e63d67b369120628baa530488","modified":1554369656131},{"_id":"public/2019/04/04/02-Park-Git/index.html","hash":"7ba080d90fe73811208f175ce56f51875963ff8f","modified":1554369656131},{"_id":"public/2019/04/04/01-Kim-Git/index.html","hash":"a1b0257dd8d1524da26701c31f4870548f6b06f7","modified":1554369656131},{"_id":"public/2019/04/04/02-Numpy/index.html","hash":"45d55dd2b6c9525e1b54620c5fdd51cd5d4fa0ca","modified":1554369656131},{"_id":"public/2019/04/04/01-Pandas/index.html","hash":"c6a3404a3ac393dfeaa44b56222274bb1ff94849","modified":1554369656131},{"_id":"public/archives/index.html","hash":"f29947f12fd70bbe1ece0c317b893f4e3446b97f","modified":1554369656131},{"_id":"public/2019/04/04/captcha-solver-study/index.html","hash":"0dd6739b86413360a54df67309da88129d4f6bb8","modified":1554369656131},{"_id":"public/index.html","hash":"814a721484ff634608f49afa46de2ae406fa0ea6","modified":1554369656131},{"_id":"public/archives/2019/index.html","hash":"823d6e95ea004c86c893093ef9b3c87772415cb9","modified":1554369656131},{"_id":"public/archives/2019/04/index.html","hash":"c19a06c876011d61f2b4ab8e05cebbbf00385146","modified":1554369656131},{"_id":"public/2019/04/04/03-BaekShin-Git/ff2.png","hash":"8a8f8686b44650b3f0a7949ac9f811fef489dc4a","modified":1554369656136},{"_id":"public/2019/04/04/03-BaekShin-Git/ff1.png","hash":"d2b169aa99a97b4ba559440301999dbe47363c80","modified":1554369656136},{"_id":"public/2019/04/04/03-BaekShin-Git/ff3.png","hash":"03a96b68465d8fc48111628881c062a257111b34","modified":1554369656136},{"_id":"public/2019/04/04/03-BaekShin-Git/nff.png","hash":"99f365c0dddbfc54ce7b11b24d6836b1e2826481","modified":1554369656136},{"_id":"public/2019/04/04/03-BaekShin-Git/ff4.png","hash":"6dad94ae1d64b26e96538cffd3e637b79e11f972","modified":1554369656136},{"_id":"public/2019/04/04/03-BaekShin-Git/example1.png","hash":"9a9c62b50863bfeef04e2e5ee56de6404527ab4c","modified":1554369656136},{"_id":"public/2019/04/04/03-BaekShin-Git/merge.png","hash":"fdc0e392a02f875082c169929bdfe7b6ea0cab36","modified":1554369656136},{"_id":"public/2019/04/04/03-BaekShin-Git/rebase.png","hash":"d75bec091454593a965ed07e91ab315dfaf1168a","modified":1554369656136}],"Category":[{"name":"Python","_id":"cju2emgls0002w4ullky2vy7z"},{"name":"Hexo","_id":"cju2emgm40007w4ul780ipv54"},{"name":"Git","_id":"cju2emgm9000dw4ulv3lyco3v"}],"Data":[],"Page":[],"Post":[{"title":"02_Numpy","date":"2019-04-04T04:36:05.000Z","_content":"## 1. numpy\n\n+ numpy는 과학계산을 위한 라이브러리 \n\n+ 다차원 배열을 처리하는데  유용한 기능을 제공\n\n+ 리스트나 튜플보다 훨씬 더 빨리 배열을 처리\n\n\n\n## 2. 배열만들기(1):array()\n\n+ 리스트와 튜플로부터 배열 생성가능\n\n```python\na = np.array([[1, 3, 5, 7], [2, 4, 6, 8]])\nprint(a.ndim) #디멘션 반환 2\nprint(a.size) #배열에 있는 총 개수 반환 8\nprint(a.shape) #각 차원의 크기 반환 (2,4)\n```\n\n\n\n## 3. 배열만들기(2):arange()\n\n```python\nb = np.arange(10) #[0 1 2 3 4 5 6 7 8 9]\nb= np.arange(7, 10) #[7 8 9]\nb = np.arange(0, 10, 2) #[0 2 4 6 8]\nb = np.arange(2.0, 3.0, 0.3) #[2.  2.3 2.6 2.9]\n```\n\n\n\n## 4. 배열만들기(3):zeros(), ones(), random()\n\n+ zeros() : 모든 값이 0인 배열 반환\n\n```python\nc = np.zeros((2, 4))\n```\n\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n\n\n+ ones() : 모든 값이 1인 배열 반환\n\n```python\nc = np.ones((3, 3))\n```\n\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n\n\n\n+ random() : 0.0과 0.1 사이의 임의 값을 채운 배열 반환\n\n```python\nc = np.random.random((2, 4))\n```\n\n[[0.89451067 0.46158826 0.32610563 0.20057699]\n [0.58088544 0.93966855 0.23445485 0.72952238]]\n\n\n\n## 5. 배열 모양 바꾸기 : reshape()\n\n+ 배열의 랭크 크기의 곱이 총 배열 수와 같아야 함\n\n```python\nd = np.arange(0,10)\nd = d.reshape(2,5)\n```\n\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n\n\n\n## 6. 항목 얻기 : []\n\n+ 1차원 배열은 리스트처럼 작동\n\n```python\ne = np.arange(0,10)\nprint(e[-1], e[7]) #9 7\n```\n\n \n\n+ 2차원은 리스트와 다르다\n\n```python\ne.shape= (2,5)\nprint(e[1,1])\ne = [[0,1,2],[3,4,5]]\nprint(e[1,1]) #에러 발생\n```\n\n\n\n## 7. 배열 연산\n\n+ 더하기, 빼기, 곱하기 동시연산 가능\n\n```python\nfrom numpy import *\na = arange(0,3) #[0 1 2]\na *= 3 #[0 3 6]\n```\n\n \n\n+ @ : 행렬곱\n\n```python\na = np.array([[1,2],[3,4]])\nb = a@a\n```\n\n\n\n## 8. 실습\n\n+ 랜덤 분포 생성\n+ 파일 입출력\n\n```python\nmean = 0 #평균\nstd = 5 #표준편차\narr1 = np.random.normal(mean, std, [5, 5]) #정규분포\narr2 = np.random.exponential(2, [5, 5]) #지수분포\narr3 = arr1 * arr2\nprint(arr3)\nnp.save(\"./data\", arr3) #data.npy로 저장\n\narr = np.load(\"./data.npy\") #불러오기\ndevArr = np.vsplit(arr, 5) #가로로 자르기\nprint(devArr[0][0])\nplt.plot(devArr[0][0]) #그래프그리기\nplt.show()\n```\n\n\n\n\n\n\n\n","source":"_posts/02-Numpy.md","raw":"---\ntitle: 02_Numpy\ndate: 2019-04-04 13:36:05\ntags: Python\ncategories: Python\n---\n## 1. numpy\n\n+ numpy는 과학계산을 위한 라이브러리 \n\n+ 다차원 배열을 처리하는데  유용한 기능을 제공\n\n+ 리스트나 튜플보다 훨씬 더 빨리 배열을 처리\n\n\n\n## 2. 배열만들기(1):array()\n\n+ 리스트와 튜플로부터 배열 생성가능\n\n```python\na = np.array([[1, 3, 5, 7], [2, 4, 6, 8]])\nprint(a.ndim) #디멘션 반환 2\nprint(a.size) #배열에 있는 총 개수 반환 8\nprint(a.shape) #각 차원의 크기 반환 (2,4)\n```\n\n\n\n## 3. 배열만들기(2):arange()\n\n```python\nb = np.arange(10) #[0 1 2 3 4 5 6 7 8 9]\nb= np.arange(7, 10) #[7 8 9]\nb = np.arange(0, 10, 2) #[0 2 4 6 8]\nb = np.arange(2.0, 3.0, 0.3) #[2.  2.3 2.6 2.9]\n```\n\n\n\n## 4. 배열만들기(3):zeros(), ones(), random()\n\n+ zeros() : 모든 값이 0인 배열 반환\n\n```python\nc = np.zeros((2, 4))\n```\n\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\n\n\n+ ones() : 모든 값이 1인 배열 반환\n\n```python\nc = np.ones((3, 3))\n```\n\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n\n\n\n+ random() : 0.0과 0.1 사이의 임의 값을 채운 배열 반환\n\n```python\nc = np.random.random((2, 4))\n```\n\n[[0.89451067 0.46158826 0.32610563 0.20057699]\n [0.58088544 0.93966855 0.23445485 0.72952238]]\n\n\n\n## 5. 배열 모양 바꾸기 : reshape()\n\n+ 배열의 랭크 크기의 곱이 총 배열 수와 같아야 함\n\n```python\nd = np.arange(0,10)\nd = d.reshape(2,5)\n```\n\n[[0 1 2 3 4]\n [5 6 7 8 9]]\n\n\n\n## 6. 항목 얻기 : []\n\n+ 1차원 배열은 리스트처럼 작동\n\n```python\ne = np.arange(0,10)\nprint(e[-1], e[7]) #9 7\n```\n\n \n\n+ 2차원은 리스트와 다르다\n\n```python\ne.shape= (2,5)\nprint(e[1,1])\ne = [[0,1,2],[3,4,5]]\nprint(e[1,1]) #에러 발생\n```\n\n\n\n## 7. 배열 연산\n\n+ 더하기, 빼기, 곱하기 동시연산 가능\n\n```python\nfrom numpy import *\na = arange(0,3) #[0 1 2]\na *= 3 #[0 3 6]\n```\n\n \n\n+ @ : 행렬곱\n\n```python\na = np.array([[1,2],[3,4]])\nb = a@a\n```\n\n\n\n## 8. 실습\n\n+ 랜덤 분포 생성\n+ 파일 입출력\n\n```python\nmean = 0 #평균\nstd = 5 #표준편차\narr1 = np.random.normal(mean, std, [5, 5]) #정규분포\narr2 = np.random.exponential(2, [5, 5]) #지수분포\narr3 = arr1 * arr2\nprint(arr3)\nnp.save(\"./data\", arr3) #data.npy로 저장\n\narr = np.load(\"./data.npy\") #불러오기\ndevArr = np.vsplit(arr, 5) #가로로 자르기\nprint(devArr[0][0])\nplt.plot(devArr[0][0]) #그래프그리기\nplt.show()\n```\n\n\n\n\n\n\n\n","slug":"02-Numpy","published":1,"updated":"2019-04-04T04:46:06.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emglb0000w4ulpbt1zejq","content":"<h2 id=\"1-numpy\"><a href=\"#1-numpy\" class=\"headerlink\" title=\"1. numpy\"></a>1. numpy</h2><ul>\n<li><p>numpy는 과학계산을 위한 라이브러리 </p>\n</li>\n<li><p>다차원 배열을 처리하는데  유용한 기능을 제공</p>\n</li>\n<li><p>리스트나 튜플보다 훨씬 더 빨리 배열을 처리</p>\n</li>\n</ul>\n<h2 id=\"2-배열만들기-1-array\"><a href=\"#2-배열만들기-1-array\" class=\"headerlink\" title=\"2. 배열만들기(1):array()\"></a>2. 배열만들기(1):array()</h2><ul>\n<li>리스트와 튜플로부터 배열 생성가능</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]])</span><br><span class=\"line\">print(a.ndim) <span class=\"comment\">#디멘션 반환 2</span></span><br><span class=\"line\">print(a.size) <span class=\"comment\">#배열에 있는 총 개수 반환 8</span></span><br><span class=\"line\">print(a.shape) <span class=\"comment\">#각 차원의 크기 반환 (2,4)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-배열만들기-2-arange\"><a href=\"#3-배열만들기-2-arange\" class=\"headerlink\" title=\"3. 배열만들기(2):arange()\"></a>3. 배열만들기(2):arange()</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.arange(<span class=\"number\">10</span>) <span class=\"comment\">#[0 1 2 3 4 5 6 7 8 9]</span></span><br><span class=\"line\">b= np.arange(<span class=\"number\">7</span>, <span class=\"number\">10</span>) <span class=\"comment\">#[7 8 9]</span></span><br><span class=\"line\">b = np.arange(<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>) <span class=\"comment\">#[0 2 4 6 8]</span></span><br><span class=\"line\">b = np.arange(<span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">0.3</span>) <span class=\"comment\">#[2.  2.3 2.6 2.9]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-배열만들기-3-zeros-ones-random\"><a href=\"#4-배열만들기-3-zeros-ones-random\" class=\"headerlink\" title=\"4. 배열만들기(3):zeros(), ones(), random()\"></a>4. 배열만들기(3):zeros(), ones(), random()</h2><ul>\n<li>zeros() : 모든 값이 0인 배열 반환</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.zeros((<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>[[0. 0. 0. 0.]<br> [0. 0. 0. 0.]]</p>\n<ul>\n<li>ones() : 모든 값이 1인 배열 반환</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.ones((<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>[[1. 1. 1.]<br> [1. 1. 1.]<br> [1. 1. 1.]]</p>\n<ul>\n<li>random() : 0.0과 0.1 사이의 임의 값을 채운 배열 반환</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.random.random((<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>[[0.89451067 0.46158826 0.32610563 0.20057699]<br> [0.58088544 0.93966855 0.23445485 0.72952238]]</p>\n<h2 id=\"5-배열-모양-바꾸기-reshape\"><a href=\"#5-배열-모양-바꾸기-reshape\" class=\"headerlink\" title=\"5. 배열 모양 바꾸기 : reshape()\"></a>5. 배열 모양 바꾸기 : reshape()</h2><ul>\n<li>배열의 랭크 크기의 곱이 총 배열 수와 같아야 함</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">d = d.reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>[[0 1 2 3 4]<br> [5 6 7 8 9]]</p>\n<h2 id=\"6-항목-얻기\"><a href=\"#6-항목-얻기\" class=\"headerlink\" title=\"6. 항목 얻기 : []\"></a>6. 항목 얻기 : []</h2><ul>\n<li>1차원 배열은 리스트처럼 작동</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e = np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">print(e[<span class=\"number\">-1</span>], e[<span class=\"number\">7</span>]) <span class=\"comment\">#9 7</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2차원은 리스트와 다르다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.shape= (<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">print(e[<span class=\"number\">1</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">e = [[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">print(e[<span class=\"number\">1</span>,<span class=\"number\">1</span>]) <span class=\"comment\">#에러 발생</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-배열-연산\"><a href=\"#7-배열-연산\" class=\"headerlink\" title=\"7. 배열 연산\"></a>7. 배열 연산</h2><ul>\n<li>더하기, 빼기, 곱하기 동시연산 가능</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">a = arange(<span class=\"number\">0</span>,<span class=\"number\">3</span>) <span class=\"comment\">#[0 1 2]</span></span><br><span class=\"line\">a *= <span class=\"number\">3</span> <span class=\"comment\">#[0 3 6]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>@ : 행렬곱</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">b = a@a</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-실습\"><a href=\"#8-실습\" class=\"headerlink\" title=\"8. 실습\"></a>8. 실습</h2><ul>\n<li>랜덤 분포 생성</li>\n<li>파일 입출력</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mean = <span class=\"number\">0</span> <span class=\"comment\">#평균</span></span><br><span class=\"line\">std = <span class=\"number\">5</span> <span class=\"comment\">#표준편차</span></span><br><span class=\"line\">arr1 = np.random.normal(mean, std, [<span class=\"number\">5</span>, <span class=\"number\">5</span>]) <span class=\"comment\">#정규분포</span></span><br><span class=\"line\">arr2 = np.random.exponential(<span class=\"number\">2</span>, [<span class=\"number\">5</span>, <span class=\"number\">5</span>]) <span class=\"comment\">#지수분포</span></span><br><span class=\"line\">arr3 = arr1 * arr2</span><br><span class=\"line\">print(arr3)</span><br><span class=\"line\">np.save(<span class=\"string\">\"./data\"</span>, arr3) <span class=\"comment\">#data.npy로 저장</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr = np.load(<span class=\"string\">\"./data.npy\"</span>) <span class=\"comment\">#불러오기</span></span><br><span class=\"line\">devArr = np.vsplit(arr, <span class=\"number\">5</span>) <span class=\"comment\">#가로로 자르기</span></span><br><span class=\"line\">print(devArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\">plt.plot(devArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) <span class=\"comment\">#그래프그리기</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-numpy\"><a href=\"#1-numpy\" class=\"headerlink\" title=\"1. numpy\"></a>1. numpy</h2><ul>\n<li><p>numpy는 과학계산을 위한 라이브러리 </p>\n</li>\n<li><p>다차원 배열을 처리하는데  유용한 기능을 제공</p>\n</li>\n<li><p>리스트나 튜플보다 훨씬 더 빨리 배열을 처리</p>\n</li>\n</ul>\n<h2 id=\"2-배열만들기-1-array\"><a href=\"#2-배열만들기-1-array\" class=\"headerlink\" title=\"2. 배열만들기(1):array()\"></a>2. 배열만들기(1):array()</h2><ul>\n<li>리스트와 튜플로부터 배열 생성가능</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]])</span><br><span class=\"line\">print(a.ndim) <span class=\"comment\">#디멘션 반환 2</span></span><br><span class=\"line\">print(a.size) <span class=\"comment\">#배열에 있는 총 개수 반환 8</span></span><br><span class=\"line\">print(a.shape) <span class=\"comment\">#각 차원의 크기 반환 (2,4)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-배열만들기-2-arange\"><a href=\"#3-배열만들기-2-arange\" class=\"headerlink\" title=\"3. 배열만들기(2):arange()\"></a>3. 배열만들기(2):arange()</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.arange(<span class=\"number\">10</span>) <span class=\"comment\">#[0 1 2 3 4 5 6 7 8 9]</span></span><br><span class=\"line\">b= np.arange(<span class=\"number\">7</span>, <span class=\"number\">10</span>) <span class=\"comment\">#[7 8 9]</span></span><br><span class=\"line\">b = np.arange(<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>) <span class=\"comment\">#[0 2 4 6 8]</span></span><br><span class=\"line\">b = np.arange(<span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">0.3</span>) <span class=\"comment\">#[2.  2.3 2.6 2.9]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-배열만들기-3-zeros-ones-random\"><a href=\"#4-배열만들기-3-zeros-ones-random\" class=\"headerlink\" title=\"4. 배열만들기(3):zeros(), ones(), random()\"></a>4. 배열만들기(3):zeros(), ones(), random()</h2><ul>\n<li>zeros() : 모든 값이 0인 배열 반환</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.zeros((<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>[[0. 0. 0. 0.]<br> [0. 0. 0. 0.]]</p>\n<ul>\n<li>ones() : 모든 값이 1인 배열 반환</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.ones((<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>[[1. 1. 1.]<br> [1. 1. 1.]<br> [1. 1. 1.]]</p>\n<ul>\n<li>random() : 0.0과 0.1 사이의 임의 값을 채운 배열 반환</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.random.random((<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n<p>[[0.89451067 0.46158826 0.32610563 0.20057699]<br> [0.58088544 0.93966855 0.23445485 0.72952238]]</p>\n<h2 id=\"5-배열-모양-바꾸기-reshape\"><a href=\"#5-배열-모양-바꾸기-reshape\" class=\"headerlink\" title=\"5. 배열 모양 바꾸기 : reshape()\"></a>5. 배열 모양 바꾸기 : reshape()</h2><ul>\n<li>배열의 랭크 크기의 곱이 총 배열 수와 같아야 함</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">d = d.reshape(<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>[[0 1 2 3 4]<br> [5 6 7 8 9]]</p>\n<h2 id=\"6-항목-얻기\"><a href=\"#6-항목-얻기\" class=\"headerlink\" title=\"6. 항목 얻기 : []\"></a>6. 항목 얻기 : []</h2><ul>\n<li>1차원 배열은 리스트처럼 작동</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e = np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">print(e[<span class=\"number\">-1</span>], e[<span class=\"number\">7</span>]) <span class=\"comment\">#9 7</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2차원은 리스트와 다르다</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.shape= (<span class=\"number\">2</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">print(e[<span class=\"number\">1</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">e = [[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\">print(e[<span class=\"number\">1</span>,<span class=\"number\">1</span>]) <span class=\"comment\">#에러 발생</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-배열-연산\"><a href=\"#7-배열-연산\" class=\"headerlink\" title=\"7. 배열 연산\"></a>7. 배열 연산</h2><ul>\n<li>더하기, 빼기, 곱하기 동시연산 가능</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\">a = arange(<span class=\"number\">0</span>,<span class=\"number\">3</span>) <span class=\"comment\">#[0 1 2]</span></span><br><span class=\"line\">a *= <span class=\"number\">3</span> <span class=\"comment\">#[0 3 6]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>@ : 행렬곱</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\">b = a@a</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-실습\"><a href=\"#8-실습\" class=\"headerlink\" title=\"8. 실습\"></a>8. 실습</h2><ul>\n<li>랜덤 분포 생성</li>\n<li>파일 입출력</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mean = <span class=\"number\">0</span> <span class=\"comment\">#평균</span></span><br><span class=\"line\">std = <span class=\"number\">5</span> <span class=\"comment\">#표준편차</span></span><br><span class=\"line\">arr1 = np.random.normal(mean, std, [<span class=\"number\">5</span>, <span class=\"number\">5</span>]) <span class=\"comment\">#정규분포</span></span><br><span class=\"line\">arr2 = np.random.exponential(<span class=\"number\">2</span>, [<span class=\"number\">5</span>, <span class=\"number\">5</span>]) <span class=\"comment\">#지수분포</span></span><br><span class=\"line\">arr3 = arr1 * arr2</span><br><span class=\"line\">print(arr3)</span><br><span class=\"line\">np.save(<span class=\"string\">\"./data\"</span>, arr3) <span class=\"comment\">#data.npy로 저장</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr = np.load(<span class=\"string\">\"./data.npy\"</span>) <span class=\"comment\">#불러오기</span></span><br><span class=\"line\">devArr = np.vsplit(arr, <span class=\"number\">5</span>) <span class=\"comment\">#가로로 자르기</span></span><br><span class=\"line\">print(devArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\">plt.plot(devArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) <span class=\"comment\">#그래프그리기</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n"},{"title":"02_Hexo","date":"2019-04-04T05:24:56.000Z","_content":"","source":"_posts/02-Hexo.md","raw":"---\ntitle: 02_Hexo\ndate: 2019-04-04 14:24:56\ntags: Hexo\ncategories: Hexo\n---\n","slug":"02-Hexo","published":1,"updated":"2019-04-04T05:25:11.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emgln0001w4ulwcak88ps","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"01_Kim_Git","date":"2019-04-04T04:52:42.000Z","_content":"# git_test\n\n+ how to git pull request ? \n\n## 1. Fork\n\n+ 타겟 프로젝트의 저장소를 자신의 저장소로 Fork\n{% asset_img 1.png [1]%}\n{% asset_img 2.png [2]%}\n\n## 2. clone, remote 설정\n\n+ Fork한 저장소를 로컬에 clone한다.\n```\n$ git clone 'https://github.com/youhyeoneee/git_test.git'\n```\n\n+ 로컬 저장소에 원격 저장소를 추가한다. \n\n\t- 원본 프로젝트 저장소 (직접 추가 필요)\n\t- fork한 로컬 프로젝트 (clone을 하면 기본적으로 origin이라는 별명으로 추가되어있다.)\n\n```\n#원본 프로젝트 저장소를 원격 저장소로 추가\n$ git remote add hyeong(별명) https://github.com/DevHyung/git_test\n\n#원격 저장소 설정 현황 확인 \n$ git remote -v\n\nhyeong  https://github.com/DevHyung/git_test (fetch)\nhyeong  https://github.com/DevHyung/git_test (push)\norigin  https://github.com/youhyeoneee/git_test.git (fetch)\norigin  https://github.com/youhyeoneee/git_test.git (push)\n\n```\n\n## 3. branch 생성 \n\n+ 자신의 로컬 컴퓨터에서 코드를 추가하는 작업은 branch를 만들어서 진행한다.\n\n```\n# youhyeon 이라는 이름의 branch를 생성한다.\n$ git checkout -b youhyeon\nSwitched to a new branch 'youhyeon'\n\n# 이제 2개의 브랜치가 존재한다. \n$ git branch\n  master\n* youhyeon\n\n```\n\n## 4. 수정 작업 후 add, commit, push\n\n+ 수정 사항을 add, commit, push를 통해서 자신의 guthub repository(origin)에 반영한다.\n\n+ **주의사항** puch 진행시에 branch 이름을 명시해주어야 한다.\n```\n# youhyeon 브랜치의 수정 내역을 origin으로 푸시한다.\n$ git push origin youhyeon\n``` \n\n## 5. Pull Request 생성\n\n+ push 완료 후 본인 계정의 github 저장소에 들어오면 **Compare & pull request** 버튼이 활성화 되어있다.\n{% asset_img 3.png [3]%}\n\n+ 해당 버튼을 선택하여 메시지를 작성하고 PR을 생성한다. \n\n## 6. 코드리뷰, Merge Pull Request\n\n+ PR을 받은 원본 저장소 관리자는 코드 변경 내역을 확인하고 Merge 여부를 결정한다.\n\n## 7. Merge 이후 동기화 및 branch 삭제\n\n+ 원본 저장소에 Merge가 완료되면 로컬 코드와 원본 저장소의 코드를 동기화한다. \n\n+ 작업하던 로컬의 branch를 삭제한다. \n\n```\n#코드 동기화\n$ git pull hyeong\n\n#브랜치 삭제 \n$ git branch -d youhyeon\n```\n+ 나중에 추가로 작업할 일이 있다면 **git pull hyeong(remote 별명)** 명령을 통해 \n  원본 저장소와 동기화를 진행하고 3~7을 반복한다. \n\n\n## 출처 : https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/","source":"_posts/01-Kim-Git.md","raw":"---\ntitle: 01_Kim_Git\ndate: 2019-04-04 13:52:42\ntags: Git\ncategories: Git\n---\n# git_test\n\n+ how to git pull request ? \n\n## 1. Fork\n\n+ 타겟 프로젝트의 저장소를 자신의 저장소로 Fork\n{% asset_img 1.png [1]%}\n{% asset_img 2.png [2]%}\n\n## 2. clone, remote 설정\n\n+ Fork한 저장소를 로컬에 clone한다.\n```\n$ git clone 'https://github.com/youhyeoneee/git_test.git'\n```\n\n+ 로컬 저장소에 원격 저장소를 추가한다. \n\n\t- 원본 프로젝트 저장소 (직접 추가 필요)\n\t- fork한 로컬 프로젝트 (clone을 하면 기본적으로 origin이라는 별명으로 추가되어있다.)\n\n```\n#원본 프로젝트 저장소를 원격 저장소로 추가\n$ git remote add hyeong(별명) https://github.com/DevHyung/git_test\n\n#원격 저장소 설정 현황 확인 \n$ git remote -v\n\nhyeong  https://github.com/DevHyung/git_test (fetch)\nhyeong  https://github.com/DevHyung/git_test (push)\norigin  https://github.com/youhyeoneee/git_test.git (fetch)\norigin  https://github.com/youhyeoneee/git_test.git (push)\n\n```\n\n## 3. branch 생성 \n\n+ 자신의 로컬 컴퓨터에서 코드를 추가하는 작업은 branch를 만들어서 진행한다.\n\n```\n# youhyeon 이라는 이름의 branch를 생성한다.\n$ git checkout -b youhyeon\nSwitched to a new branch 'youhyeon'\n\n# 이제 2개의 브랜치가 존재한다. \n$ git branch\n  master\n* youhyeon\n\n```\n\n## 4. 수정 작업 후 add, commit, push\n\n+ 수정 사항을 add, commit, push를 통해서 자신의 guthub repository(origin)에 반영한다.\n\n+ **주의사항** puch 진행시에 branch 이름을 명시해주어야 한다.\n```\n# youhyeon 브랜치의 수정 내역을 origin으로 푸시한다.\n$ git push origin youhyeon\n``` \n\n## 5. Pull Request 생성\n\n+ push 완료 후 본인 계정의 github 저장소에 들어오면 **Compare & pull request** 버튼이 활성화 되어있다.\n{% asset_img 3.png [3]%}\n\n+ 해당 버튼을 선택하여 메시지를 작성하고 PR을 생성한다. \n\n## 6. 코드리뷰, Merge Pull Request\n\n+ PR을 받은 원본 저장소 관리자는 코드 변경 내역을 확인하고 Merge 여부를 결정한다.\n\n## 7. Merge 이후 동기화 및 branch 삭제\n\n+ 원본 저장소에 Merge가 완료되면 로컬 코드와 원본 저장소의 코드를 동기화한다. \n\n+ 작업하던 로컬의 branch를 삭제한다. \n\n```\n#코드 동기화\n$ git pull hyeong\n\n#브랜치 삭제 \n$ git branch -d youhyeon\n```\n+ 나중에 추가로 작업할 일이 있다면 **git pull hyeong(remote 별명)** 명령을 통해 \n  원본 저장소와 동기화를 진행하고 3~7을 반복한다. \n\n\n## 출처 : https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/","slug":"01-Kim-Git","published":1,"updated":"2019-04-04T05:06:37.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emglv0004w4ulm5tjdfsq","content":"<h1 id=\"git-test\"><a href=\"#git-test\" class=\"headerlink\" title=\"git_test\"></a>git_test</h1><ul>\n<li>how to git pull request ? </li>\n</ul>\n<h2 id=\"1-Fork\"><a href=\"#1-Fork\" class=\"headerlink\" title=\"1. Fork\"></a>1. Fork</h2><ul>\n<li>타겟 프로젝트의 저장소를 자신의 저장소로 Fork<img src=\"/2019/04/04/01-Kim-Git/1.png\" title=\"[1]\">\n<img src=\"/2019/04/04/01-Kim-Git/2.png\" title=\"[2]\">\n</li>\n</ul>\n<h2 id=\"2-clone-remote-설정\"><a href=\"#2-clone-remote-설정\" class=\"headerlink\" title=\"2. clone, remote 설정\"></a>2. clone, remote 설정</h2><ul>\n<li><p>Fork한 저장소를 로컬에 clone한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone &apos;https://github.com/youhyeoneee/git_test.git&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>로컬 저장소에 원격 저장소를 추가한다. </p>\n<ul>\n<li>원본 프로젝트 저장소 (직접 추가 필요)</li>\n<li>fork한 로컬 프로젝트 (clone을 하면 기본적으로 origin이라는 별명으로 추가되어있다.)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#원본 프로젝트 저장소를 원격 저장소로 추가</span><br><span class=\"line\">$ git remote add hyeong(별명) https://github.com/DevHyung/git_test</span><br><span class=\"line\"></span><br><span class=\"line\">#원격 저장소 설정 현황 확인 </span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\">hyeong  https://github.com/DevHyung/git_test (fetch)</span><br><span class=\"line\">hyeong  https://github.com/DevHyung/git_test (push)</span><br><span class=\"line\">origin  https://github.com/youhyeoneee/git_test.git (fetch)</span><br><span class=\"line\">origin  https://github.com/youhyeoneee/git_test.git (push)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-branch-생성\"><a href=\"#3-branch-생성\" class=\"headerlink\" title=\"3. branch 생성\"></a>3. branch 생성</h2><ul>\n<li>자신의 로컬 컴퓨터에서 코드를 추가하는 작업은 branch를 만들어서 진행한다.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># youhyeon 이라는 이름의 branch를 생성한다.</span><br><span class=\"line\">$ git checkout -b youhyeon</span><br><span class=\"line\">Switched to a new branch &apos;youhyeon&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 이제 2개의 브랜치가 존재한다. </span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">  master</span><br><span class=\"line\">* youhyeon</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-수정-작업-후-add-commit-push\"><a href=\"#4-수정-작업-후-add-commit-push\" class=\"headerlink\" title=\"4. 수정 작업 후 add, commit, push\"></a>4. 수정 작업 후 add, commit, push</h2><ul>\n<li><p>수정 사항을 add, commit, push를 통해서 자신의 guthub repository(origin)에 반영한다.</p>\n</li>\n<li><p><strong>주의사항</strong> puch 진행시에 branch 이름을 명시해주어야 한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># youhyeon 브랜치의 수정 내역을 origin으로 푸시한다.</span><br><span class=\"line\">$ git push origin youhyeon</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">## 5. Pull Request 생성</span><br><span class=\"line\"></span><br><span class=\"line\">+ push 완료 후 본인 계정의 github 저장소에 들어오면 **Compare &amp; pull request** 버튼이 활성화 되어있다.</span><br><span class=\"line\">&#123;% asset_img 3.png [3]%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ 해당 버튼을 선택하여 메시지를 작성하고 PR을 생성한다. </span><br><span class=\"line\"></span><br><span class=\"line\">## 6. 코드리뷰, Merge Pull Request</span><br><span class=\"line\"></span><br><span class=\"line\">+ PR을 받은 원본 저장소 관리자는 코드 변경 내역을 확인하고 Merge 여부를 결정한다.</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Merge 이후 동기화 및 branch 삭제</span><br><span class=\"line\"></span><br><span class=\"line\">+ 원본 저장소에 Merge가 완료되면 로컬 코드와 원본 저장소의 코드를 동기화한다. </span><br><span class=\"line\"></span><br><span class=\"line\">+ 작업하던 로컬의 branch를 삭제한다.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#코드 동기화<br>$ git pull hyeong</p>\n<p>#브랜치 삭제<br>$ git branch -d youhyeon<br><code>`</code></p>\n<ul>\n<li>나중에 추가로 작업할 일이 있다면 <strong>git pull hyeong(remote 별명)</strong> 명령을 통해<br>원본 저장소와 동기화를 진행하고 3~7을 반복한다. </li>\n</ul>\n<h2 id=\"출처-https-wayhome25-github-io-git-2017-07-08-git-first-pull-request-story\"><a href=\"#출처-https-wayhome25-github-io-git-2017-07-08-git-first-pull-request-story\" class=\"headerlink\" title=\"출처 : https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/\"></a>출처 : <a href=\"https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/\" target=\"_blank\" rel=\"noopener\">https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/</a></h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git-test\"><a href=\"#git-test\" class=\"headerlink\" title=\"git_test\"></a>git_test</h1><ul>\n<li>how to git pull request ? </li>\n</ul>\n<h2 id=\"1-Fork\"><a href=\"#1-Fork\" class=\"headerlink\" title=\"1. Fork\"></a>1. Fork</h2><ul>\n<li>타겟 프로젝트의 저장소를 자신의 저장소로 Fork<img src=\"/2019/04/04/01-Kim-Git/1.png\" title=\"[1]\">\n<img src=\"/2019/04/04/01-Kim-Git/2.png\" title=\"[2]\">\n</li>\n</ul>\n<h2 id=\"2-clone-remote-설정\"><a href=\"#2-clone-remote-설정\" class=\"headerlink\" title=\"2. clone, remote 설정\"></a>2. clone, remote 설정</h2><ul>\n<li><p>Fork한 저장소를 로컬에 clone한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone &apos;https://github.com/youhyeoneee/git_test.git&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>로컬 저장소에 원격 저장소를 추가한다. </p>\n<ul>\n<li>원본 프로젝트 저장소 (직접 추가 필요)</li>\n<li>fork한 로컬 프로젝트 (clone을 하면 기본적으로 origin이라는 별명으로 추가되어있다.)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#원본 프로젝트 저장소를 원격 저장소로 추가</span><br><span class=\"line\">$ git remote add hyeong(별명) https://github.com/DevHyung/git_test</span><br><span class=\"line\"></span><br><span class=\"line\">#원격 저장소 설정 현황 확인 </span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\">hyeong  https://github.com/DevHyung/git_test (fetch)</span><br><span class=\"line\">hyeong  https://github.com/DevHyung/git_test (push)</span><br><span class=\"line\">origin  https://github.com/youhyeoneee/git_test.git (fetch)</span><br><span class=\"line\">origin  https://github.com/youhyeoneee/git_test.git (push)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-branch-생성\"><a href=\"#3-branch-생성\" class=\"headerlink\" title=\"3. branch 생성\"></a>3. branch 생성</h2><ul>\n<li>자신의 로컬 컴퓨터에서 코드를 추가하는 작업은 branch를 만들어서 진행한다.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># youhyeon 이라는 이름의 branch를 생성한다.</span><br><span class=\"line\">$ git checkout -b youhyeon</span><br><span class=\"line\">Switched to a new branch &apos;youhyeon&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 이제 2개의 브랜치가 존재한다. </span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">  master</span><br><span class=\"line\">* youhyeon</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-수정-작업-후-add-commit-push\"><a href=\"#4-수정-작업-후-add-commit-push\" class=\"headerlink\" title=\"4. 수정 작업 후 add, commit, push\"></a>4. 수정 작업 후 add, commit, push</h2><ul>\n<li><p>수정 사항을 add, commit, push를 통해서 자신의 guthub repository(origin)에 반영한다.</p>\n</li>\n<li><p><strong>주의사항</strong> puch 진행시에 branch 이름을 명시해주어야 한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># youhyeon 브랜치의 수정 내역을 origin으로 푸시한다.</span><br><span class=\"line\">$ git push origin youhyeon</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">## 5. Pull Request 생성</span><br><span class=\"line\"></span><br><span class=\"line\">+ push 완료 후 본인 계정의 github 저장소에 들어오면 **Compare &amp; pull request** 버튼이 활성화 되어있다.</span><br><span class=\"line\">&#123;% asset_img 3.png [3]%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ 해당 버튼을 선택하여 메시지를 작성하고 PR을 생성한다. </span><br><span class=\"line\"></span><br><span class=\"line\">## 6. 코드리뷰, Merge Pull Request</span><br><span class=\"line\"></span><br><span class=\"line\">+ PR을 받은 원본 저장소 관리자는 코드 변경 내역을 확인하고 Merge 여부를 결정한다.</span><br><span class=\"line\"></span><br><span class=\"line\">## 7. Merge 이후 동기화 및 branch 삭제</span><br><span class=\"line\"></span><br><span class=\"line\">+ 원본 저장소에 Merge가 완료되면 로컬 코드와 원본 저장소의 코드를 동기화한다. </span><br><span class=\"line\"></span><br><span class=\"line\">+ 작업하던 로컬의 branch를 삭제한다.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>#코드 동기화<br>$ git pull hyeong</p>\n<p>#브랜치 삭제<br>$ git branch -d youhyeon<br><code>`</code></p>\n<ul>\n<li>나중에 추가로 작업할 일이 있다면 <strong>git pull hyeong(remote 별명)</strong> 명령을 통해<br>원본 저장소와 동기화를 진행하고 3~7을 반복한다. </li>\n</ul>\n<h2 id=\"출처-https-wayhome25-github-io-git-2017-07-08-git-first-pull-request-story\"><a href=\"#출처-https-wayhome25-github-io-git-2017-07-08-git-first-pull-request-story\" class=\"headerlink\" title=\"출처 : https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/\"></a>출처 : <a href=\"https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/\" target=\"_blank\" rel=\"noopener\">https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/</a></h2>"},{"title":"03-BaekShin-Git","date":"2019-04-04T07:38:33.000Z","_content":"### 1. Git Branch 사용하기\n\n---\n\n```bash\n$ git branch #현재 존재하는 branch 조회\n$ git checkout #현재 작업중인 brach 조회\n$ git checkout branch1 #전환\n```\n\n\n\n```bash\n$ git branch branch1 master\n```\n\n+ master에서 branch1이름의 branch 만들기\n\n\n\n```bash\n$ git checkout -b branch1 master\n```\n\n+ master에서 branch1이름의 branch 만들고 checkout함(전환)\n\n\n\n```bash\n$ git branch -d branch1 #삭제(github는 유지)\n$ git push origin -delete branch1 #삭제(github는 삭제)\n```\n\n\n\n### 2. merge와 rebase\n---\n두 개의 branch를 합치는 방법으로는 merge와 rebase가 있다.\n차이점을 한번 알아본 후 merge시 주의할 점도 알아보자.\n\n#### 2.1 merge와 rebase의 차이\n---\n{% asset_img example1.png [example1] %}\n\n현 상태가 위와 같다고 가정을 해본다.\n\nmerge를 하게 되면 아래 그림과 같은 로그가 남겨진다.\n\n{% asset_img merge.png [merge] %}\n\nrebase를 하게 되면 아래 그림과 같은 로그가 남겨진다.\n\n{% asset_img rebase.png [rebase] %}\n\n명백한 차이점이 있다!\n+ merge : 변경된 점의 모든 로그가 남는다. (큰 프로젝트면 복잡해짐)\n+ rebase : 로그가 단순하게 변경되지만, 정확한 로그를 남기는 것이 불가능해 진다.\n\n#### 2.2 merge시 fast-forward 충돌 해결법\n---\n{% asset_img ff1.png [ff1] %}\n\n다음과 같이 master branch와 bugfix branch가 있다고 가정한다.\n\n이제 merge를 하게 되면\n\n{% asset_img ff2.png [ff2] %}\n\nbugfix branch가 master의 모든 이력을 포함하고 있기 때문에 master branch가 단순히 이동하기만 한다. 이것이 바로 **fast-forward**..\n\n**How to solve**\n{% asset_img ff3.png [ff3] %}\n\n단순하게 master branch에 변경점을 주고 commit하면 될 것 같다.. 혹은\n\n```\n$ git merge --no-ff\n```\nmerge를 할때 다음과 같은 옵션을 주게 되면\n{% asset_img nff.png [nff] %}\n\n위 사진과 같이 fast-forward merge를 하지 않는다. 이렇게 하면 merge를 한 이후에도 bugfix branch를 계속해서 사용할 수 있다! \n\n**다음은 문제가 발생한 후의 대처법이다.**\n{% asset_img ff4.png [ff4] %}\n\n위 그림을 보면 master와 issue2가 fast-forward merge되었다.\n\n이 상태에서 issue3와 merge를 할 시 같은 파일의 같은 행이 변경 된다면 분명 오류가 날 것이며 파일이 다음과 같이 변경 될 것의 예시이다.\n\n```\n111111111111111\n222222222222222\n<<<<<<< HEAD\n333333333333333\n=======\n444444444444444\n>>>>>>> issue3\n```\n이제\n\n```\n111111111111111\n222222222222222\n333333333333333\n444444444444444\n```\n\n다음과 같이 변경해주고 commit하면 문제가 해결 된다. (이것도 non fast-forward 방식)","source":"_posts/03-BaekShin-Git.md","raw":"---\ntitle: 03-BaekShin-Git\ndate: 2019-04-04 16:38:33\ntags: Git\ncategories: Git\n---\n### 1. Git Branch 사용하기\n\n---\n\n```bash\n$ git branch #현재 존재하는 branch 조회\n$ git checkout #현재 작업중인 brach 조회\n$ git checkout branch1 #전환\n```\n\n\n\n```bash\n$ git branch branch1 master\n```\n\n+ master에서 branch1이름의 branch 만들기\n\n\n\n```bash\n$ git checkout -b branch1 master\n```\n\n+ master에서 branch1이름의 branch 만들고 checkout함(전환)\n\n\n\n```bash\n$ git branch -d branch1 #삭제(github는 유지)\n$ git push origin -delete branch1 #삭제(github는 삭제)\n```\n\n\n\n### 2. merge와 rebase\n---\n두 개의 branch를 합치는 방법으로는 merge와 rebase가 있다.\n차이점을 한번 알아본 후 merge시 주의할 점도 알아보자.\n\n#### 2.1 merge와 rebase의 차이\n---\n{% asset_img example1.png [example1] %}\n\n현 상태가 위와 같다고 가정을 해본다.\n\nmerge를 하게 되면 아래 그림과 같은 로그가 남겨진다.\n\n{% asset_img merge.png [merge] %}\n\nrebase를 하게 되면 아래 그림과 같은 로그가 남겨진다.\n\n{% asset_img rebase.png [rebase] %}\n\n명백한 차이점이 있다!\n+ merge : 변경된 점의 모든 로그가 남는다. (큰 프로젝트면 복잡해짐)\n+ rebase : 로그가 단순하게 변경되지만, 정확한 로그를 남기는 것이 불가능해 진다.\n\n#### 2.2 merge시 fast-forward 충돌 해결법\n---\n{% asset_img ff1.png [ff1] %}\n\n다음과 같이 master branch와 bugfix branch가 있다고 가정한다.\n\n이제 merge를 하게 되면\n\n{% asset_img ff2.png [ff2] %}\n\nbugfix branch가 master의 모든 이력을 포함하고 있기 때문에 master branch가 단순히 이동하기만 한다. 이것이 바로 **fast-forward**..\n\n**How to solve**\n{% asset_img ff3.png [ff3] %}\n\n단순하게 master branch에 변경점을 주고 commit하면 될 것 같다.. 혹은\n\n```\n$ git merge --no-ff\n```\nmerge를 할때 다음과 같은 옵션을 주게 되면\n{% asset_img nff.png [nff] %}\n\n위 사진과 같이 fast-forward merge를 하지 않는다. 이렇게 하면 merge를 한 이후에도 bugfix branch를 계속해서 사용할 수 있다! \n\n**다음은 문제가 발생한 후의 대처법이다.**\n{% asset_img ff4.png [ff4] %}\n\n위 그림을 보면 master와 issue2가 fast-forward merge되었다.\n\n이 상태에서 issue3와 merge를 할 시 같은 파일의 같은 행이 변경 된다면 분명 오류가 날 것이며 파일이 다음과 같이 변경 될 것의 예시이다.\n\n```\n111111111111111\n222222222222222\n<<<<<<< HEAD\n333333333333333\n=======\n444444444444444\n>>>>>>> issue3\n```\n이제\n\n```\n111111111111111\n222222222222222\n333333333333333\n444444444444444\n```\n\n다음과 같이 변경해주고 commit하면 문제가 해결 된다. (이것도 non fast-forward 방식)","slug":"03-BaekShin-Git","published":1,"updated":"2019-04-04T09:18:35.659Z","_id":"cju2emgly0005w4ul6bg8s549","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-Git-Branch-사용하기\"><a href=\"#1-Git-Branch-사용하기\" class=\"headerlink\" title=\"1. Git Branch 사용하기\"></a>1. Git Branch 사용하기</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"comment\">#현재 존재하는 branch 조회</span></span><br><span class=\"line\">$ git checkout <span class=\"comment\">#현재 작업중인 brach 조회</span></span><br><span class=\"line\">$ git checkout branch1 <span class=\"comment\">#전환</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch branch1 master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>master에서 branch1이름의 branch 만들기</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b branch1 master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>master에서 branch1이름의 branch 만들고 checkout함(전환)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d branch1 <span class=\"comment\">#삭제(github는 유지)</span></span><br><span class=\"line\">$ git push origin -delete branch1 <span class=\"comment\">#삭제(github는 삭제)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-merge와-rebase\"><a href=\"#2-merge와-rebase\" class=\"headerlink\" title=\"2. merge와 rebase\"></a>2. merge와 rebase</h3><hr>\n<p>두 개의 branch를 합치는 방법으로는 merge와 rebase가 있다.<br>차이점을 한번 알아본 후 merge시 주의할 점도 알아보자.</p>\n<h4 id=\"2-1-merge와-rebase의-차이\"><a href=\"#2-1-merge와-rebase의-차이\" class=\"headerlink\" title=\"2.1 merge와 rebase의 차이\"></a>2.1 merge와 rebase의 차이</h4><hr>\n<img src=\"/2019/04/04/03-BaekShin-Git/example1.png\" title=\"[example1]\">\n<p>현 상태가 위와 같다고 가정을 해본다.</p>\n<p>merge를 하게 되면 아래 그림과 같은 로그가 남겨진다.</p>\n<img src=\"/2019/04/04/03-BaekShin-Git/merge.png\" title=\"[merge]\">\n<p>rebase를 하게 되면 아래 그림과 같은 로그가 남겨진다.</p>\n<img src=\"/2019/04/04/03-BaekShin-Git/rebase.png\" title=\"[rebase]\">\n<p>명백한 차이점이 있다!</p>\n<ul>\n<li>merge : 변경된 점의 모든 로그가 남는다. (큰 프로젝트면 복잡해짐)</li>\n<li>rebase : 로그가 단순하게 변경되지만, 정확한 로그를 남기는 것이 불가능해 진다.</li>\n</ul>\n<h4 id=\"2-2-merge시-fast-forward-충돌-해결법\"><a href=\"#2-2-merge시-fast-forward-충돌-해결법\" class=\"headerlink\" title=\"2.2 merge시 fast-forward 충돌 해결법\"></a>2.2 merge시 fast-forward 충돌 해결법</h4><hr>\n<img src=\"/2019/04/04/03-BaekShin-Git/ff1.png\" title=\"[ff1]\">\n<p>다음과 같이 master branch와 bugfix branch가 있다고 가정한다.</p>\n<p>이제 merge를 하게 되면</p>\n<img src=\"/2019/04/04/03-BaekShin-Git/ff2.png\" title=\"[ff2]\">\n<p>bugfix branch가 master의 모든 이력을 포함하고 있기 때문에 master branch가 단순히 이동하기만 한다. 이것이 바로 <strong>fast-forward</strong>..</p>\n<p><strong>How to solve</strong><br><img src=\"/2019/04/04/03-BaekShin-Git/ff3.png\" title=\"[ff3]\"></p>\n<p>단순하게 master branch에 변경점을 주고 commit하면 될 것 같다.. 혹은</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge --no-ff</span><br></pre></td></tr></table></figure>\n<p>merge를 할때 다음과 같은 옵션을 주게 되면<br><img src=\"/2019/04/04/03-BaekShin-Git/nff.png\" title=\"[nff]\"></p>\n<p>위 사진과 같이 fast-forward merge를 하지 않는다. 이렇게 하면 merge를 한 이후에도 bugfix branch를 계속해서 사용할 수 있다! </p>\n<p><strong>다음은 문제가 발생한 후의 대처법이다.</strong><br><img src=\"/2019/04/04/03-BaekShin-Git/ff4.png\" title=\"[ff4]\"></p>\n<p>위 그림을 보면 master와 issue2가 fast-forward merge되었다.</p>\n<p>이 상태에서 issue3와 merge를 할 시 같은 파일의 같은 행이 변경 된다면 분명 오류가 날 것이며 파일이 다음과 같이 변경 될 것의 예시이다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">111111111111111</span><br><span class=\"line\">222222222222222</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">333333333333333</span><br><span class=\"line\">=======</span><br><span class=\"line\">444444444444444</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; issue3</span><br></pre></td></tr></table></figure>\n<p>이제</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">111111111111111</span><br><span class=\"line\">222222222222222</span><br><span class=\"line\">333333333333333</span><br><span class=\"line\">444444444444444</span><br></pre></td></tr></table></figure>\n<p>다음과 같이 변경해주고 commit하면 문제가 해결 된다. (이것도 non fast-forward 방식)</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Git-Branch-사용하기\"><a href=\"#1-Git-Branch-사용하기\" class=\"headerlink\" title=\"1. Git Branch 사용하기\"></a>1. Git Branch 사용하기</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch <span class=\"comment\">#현재 존재하는 branch 조회</span></span><br><span class=\"line\">$ git checkout <span class=\"comment\">#현재 작업중인 brach 조회</span></span><br><span class=\"line\">$ git checkout branch1 <span class=\"comment\">#전환</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch branch1 master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>master에서 branch1이름의 branch 만들기</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b branch1 master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>master에서 branch1이름의 branch 만들고 checkout함(전환)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d branch1 <span class=\"comment\">#삭제(github는 유지)</span></span><br><span class=\"line\">$ git push origin -delete branch1 <span class=\"comment\">#삭제(github는 삭제)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-merge와-rebase\"><a href=\"#2-merge와-rebase\" class=\"headerlink\" title=\"2. merge와 rebase\"></a>2. merge와 rebase</h3><hr>\n<p>두 개의 branch를 합치는 방법으로는 merge와 rebase가 있다.<br>차이점을 한번 알아본 후 merge시 주의할 점도 알아보자.</p>\n<h4 id=\"2-1-merge와-rebase의-차이\"><a href=\"#2-1-merge와-rebase의-차이\" class=\"headerlink\" title=\"2.1 merge와 rebase의 차이\"></a>2.1 merge와 rebase의 차이</h4><hr>\n<img src=\"/2019/04/04/03-BaekShin-Git/example1.png\" title=\"[example1]\">\n<p>현 상태가 위와 같다고 가정을 해본다.</p>\n<p>merge를 하게 되면 아래 그림과 같은 로그가 남겨진다.</p>\n<img src=\"/2019/04/04/03-BaekShin-Git/merge.png\" title=\"[merge]\">\n<p>rebase를 하게 되면 아래 그림과 같은 로그가 남겨진다.</p>\n<img src=\"/2019/04/04/03-BaekShin-Git/rebase.png\" title=\"[rebase]\">\n<p>명백한 차이점이 있다!</p>\n<ul>\n<li>merge : 변경된 점의 모든 로그가 남는다. (큰 프로젝트면 복잡해짐)</li>\n<li>rebase : 로그가 단순하게 변경되지만, 정확한 로그를 남기는 것이 불가능해 진다.</li>\n</ul>\n<h4 id=\"2-2-merge시-fast-forward-충돌-해결법\"><a href=\"#2-2-merge시-fast-forward-충돌-해결법\" class=\"headerlink\" title=\"2.2 merge시 fast-forward 충돌 해결법\"></a>2.2 merge시 fast-forward 충돌 해결법</h4><hr>\n<img src=\"/2019/04/04/03-BaekShin-Git/ff1.png\" title=\"[ff1]\">\n<p>다음과 같이 master branch와 bugfix branch가 있다고 가정한다.</p>\n<p>이제 merge를 하게 되면</p>\n<img src=\"/2019/04/04/03-BaekShin-Git/ff2.png\" title=\"[ff2]\">\n<p>bugfix branch가 master의 모든 이력을 포함하고 있기 때문에 master branch가 단순히 이동하기만 한다. 이것이 바로 <strong>fast-forward</strong>..</p>\n<p><strong>How to solve</strong><br><img src=\"/2019/04/04/03-BaekShin-Git/ff3.png\" title=\"[ff3]\"></p>\n<p>단순하게 master branch에 변경점을 주고 commit하면 될 것 같다.. 혹은</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge --no-ff</span><br></pre></td></tr></table></figure>\n<p>merge를 할때 다음과 같은 옵션을 주게 되면<br><img src=\"/2019/04/04/03-BaekShin-Git/nff.png\" title=\"[nff]\"></p>\n<p>위 사진과 같이 fast-forward merge를 하지 않는다. 이렇게 하면 merge를 한 이후에도 bugfix branch를 계속해서 사용할 수 있다! </p>\n<p><strong>다음은 문제가 발생한 후의 대처법이다.</strong><br><img src=\"/2019/04/04/03-BaekShin-Git/ff4.png\" title=\"[ff4]\"></p>\n<p>위 그림을 보면 master와 issue2가 fast-forward merge되었다.</p>\n<p>이 상태에서 issue3와 merge를 할 시 같은 파일의 같은 행이 변경 된다면 분명 오류가 날 것이며 파일이 다음과 같이 변경 될 것의 예시이다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">111111111111111</span><br><span class=\"line\">222222222222222</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">333333333333333</span><br><span class=\"line\">=======</span><br><span class=\"line\">444444444444444</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; issue3</span><br></pre></td></tr></table></figure>\n<p>이제</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">111111111111111</span><br><span class=\"line\">222222222222222</span><br><span class=\"line\">333333333333333</span><br><span class=\"line\">444444444444444</span><br></pre></td></tr></table></figure>\n<p>다음과 같이 변경해주고 commit하면 문제가 해결 된다. (이것도 non fast-forward 방식)</p>\n"},{"title":"03_Hexo","date":"2019-04-04T07:43:01.000Z","_content":"### 1. Tag Plugins\n\n---\n\nHexo는 마크다운 외에 포스트를 작성하기 위해 Tag Plugin이라는 자체적인 문법을 지원\n\n#### 1.1 인용 구문\n---\n**How to use**\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n**Example**\n```\n{% blockquote 신동욱, 대학원생 https://github.com/nawook96 %}\n배고프다\n{% endblockquote %}\n```\n**Result**\n{% blockquote 신동욱, 대학원생 https://github.com/nawook96 %}\n배고프다\n{% endblockquote %}\n\n#### 1.2 코드 삽입\n---\nlang은 https://highlightjs.org 에서 지원하는 언어만 나옴(highlight), 파일명 명시도 가능\n**How to use**\n```\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n**Example**\n```\n{% codeblock lang:objc hi.h%}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n{% endcodeblock %}\n```\n**Result**\n{% codeblock lang:objc hi.h%}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n{% endcodeblock %}\n\n#### 1.3 YOUTUBE 삽입\n---\n**How to use**\n```\n{% youtube video_id %}\n```\n**Example**\n```\n{% youtube Z0ti3pBKmes %}\n```\n**Result**\n{% youtube Z0ti3pBKmes %}\n\n#### **1.4 Asset 삽입**\n----\n이미지 삽입에서 추가 설명\n**How to use**\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n### 2. disqus 추가하기\n\n---\n\n1. disqus 가입하기\n2. I want to comment on site 클릭\n3. edit profile -> Acount에서 username 설정하기\n4. <https://disqus.com/profile/signup/intent/> I want to install Disqus on my site 클릭 & 설정\n5. hexo 폴더의 _config.yml 편집\n\n```\ndisqus_shortname: username\n```\n\n+ disqus site를 만들 때 한국어 설정이 안보이는경우가 있습니다. \n+ 이때는 개발자 도구를 열어 수정하면 사용가능합니다.\n\n![캡처](https://user-images.githubusercontent.com/36959292/55462622-27f17580-5632-11e9-9890-4f4b5191cee5.PNG)\n\n+ 맨 마지막 줄 추가!\n\n### 3. Hexo Blog에 image 추가\n\n---\n\nhexo는 source 폴더의 자원을 가지고 generate를 할 때 public 폴더를 생성합니다.\n\n+ 전역자원 폴더(/source)\n\n/source/images라는 폴더를 사용하면 어느 포스트던 폴더 내 자원사용이 가능합니다.\n\n\n\n+ 포스트 자원 폴더\n\n전역 폴더에서 모든 파일을 관리하는 것이 아니라 포스트마다 폴더를 만들어 관리할 수 있습니다.\n\n```\n# Writing\npost_asset_folder: true\n```\n\nhexo 블로그 폴더의 _config.yml에서 위와 같이 변경하면 \n\n```shell\nhexo new \n```\n\n를 할때마다 폴더가 함께 생성됩니다.\n\n\n\n```\n![](./folder/img.png)\n```\n\n전역자원 폴더에 비해 상대경로로 빠르게 접근 가능하다는 장점이 있습니다.\n\n#### 3.1 Asset을 이용하여 image 추가\n---\n{% asset_img cap1.PNG [cap1] %}\n```\nhexo new post \"blahblah\"\n```\n다음 명령 실행시 같은 경로에 blahblah 폴더가 같이 생성됨\n{% asset_img cap2.PNG [cap2] %}\n**Example**\n```\n{% asset_img cap1.PNG [cap2] %}\n```\n**Result**\n{% asset_img cap1.PNG [result1] %}\n\n{% asset_img cap3.PNG [cap3] %}\n{% asset_img cap4.PNG [cap4] %}\n```\n[📃 PDF FILE ](../pdf/Git.pdf)\n{% asset_link Git.pdf 📃 PDF FILE %}\n```\n**어떻게 다를까?**\n{% asset_img cap5.PNG [cap5] %}\n{% asset_img cap6.PNG [cap6] %}\n위에 사용한건 상대경로이기 때문에 Home 화면을 제외한 곳에서 포스트를 보게 되면 찾을 수가 다.","source":"_posts/03-Hexo.md","raw":"---\ntitle: 03_Hexo\ndate: 2019-04-04 16:43:01\ntags: Hexo\ncategories: Hexo\n---\n### 1. Tag Plugins\n\n---\n\nHexo는 마크다운 외에 포스트를 작성하기 위해 Tag Plugin이라는 자체적인 문법을 지원\n\n#### 1.1 인용 구문\n---\n**How to use**\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n**Example**\n```\n{% blockquote 신동욱, 대학원생 https://github.com/nawook96 %}\n배고프다\n{% endblockquote %}\n```\n**Result**\n{% blockquote 신동욱, 대학원생 https://github.com/nawook96 %}\n배고프다\n{% endblockquote %}\n\n#### 1.2 코드 삽입\n---\nlang은 https://highlightjs.org 에서 지원하는 언어만 나옴(highlight), 파일명 명시도 가능\n**How to use**\n```\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n**Example**\n```\n{% codeblock lang:objc hi.h%}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n{% endcodeblock %}\n```\n**Result**\n{% codeblock lang:objc hi.h%}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n{% endcodeblock %}\n\n#### 1.3 YOUTUBE 삽입\n---\n**How to use**\n```\n{% youtube video_id %}\n```\n**Example**\n```\n{% youtube Z0ti3pBKmes %}\n```\n**Result**\n{% youtube Z0ti3pBKmes %}\n\n#### **1.4 Asset 삽입**\n----\n이미지 삽입에서 추가 설명\n**How to use**\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n### 2. disqus 추가하기\n\n---\n\n1. disqus 가입하기\n2. I want to comment on site 클릭\n3. edit profile -> Acount에서 username 설정하기\n4. <https://disqus.com/profile/signup/intent/> I want to install Disqus on my site 클릭 & 설정\n5. hexo 폴더의 _config.yml 편집\n\n```\ndisqus_shortname: username\n```\n\n+ disqus site를 만들 때 한국어 설정이 안보이는경우가 있습니다. \n+ 이때는 개발자 도구를 열어 수정하면 사용가능합니다.\n\n![캡처](https://user-images.githubusercontent.com/36959292/55462622-27f17580-5632-11e9-9890-4f4b5191cee5.PNG)\n\n+ 맨 마지막 줄 추가!\n\n### 3. Hexo Blog에 image 추가\n\n---\n\nhexo는 source 폴더의 자원을 가지고 generate를 할 때 public 폴더를 생성합니다.\n\n+ 전역자원 폴더(/source)\n\n/source/images라는 폴더를 사용하면 어느 포스트던 폴더 내 자원사용이 가능합니다.\n\n\n\n+ 포스트 자원 폴더\n\n전역 폴더에서 모든 파일을 관리하는 것이 아니라 포스트마다 폴더를 만들어 관리할 수 있습니다.\n\n```\n# Writing\npost_asset_folder: true\n```\n\nhexo 블로그 폴더의 _config.yml에서 위와 같이 변경하면 \n\n```shell\nhexo new \n```\n\n를 할때마다 폴더가 함께 생성됩니다.\n\n\n\n```\n![](./folder/img.png)\n```\n\n전역자원 폴더에 비해 상대경로로 빠르게 접근 가능하다는 장점이 있습니다.\n\n#### 3.1 Asset을 이용하여 image 추가\n---\n{% asset_img cap1.PNG [cap1] %}\n```\nhexo new post \"blahblah\"\n```\n다음 명령 실행시 같은 경로에 blahblah 폴더가 같이 생성됨\n{% asset_img cap2.PNG [cap2] %}\n**Example**\n```\n{% asset_img cap1.PNG [cap2] %}\n```\n**Result**\n{% asset_img cap1.PNG [result1] %}\n\n{% asset_img cap3.PNG [cap3] %}\n{% asset_img cap4.PNG [cap4] %}\n```\n[📃 PDF FILE ](../pdf/Git.pdf)\n{% asset_link Git.pdf 📃 PDF FILE %}\n```\n**어떻게 다를까?**\n{% asset_img cap5.PNG [cap5] %}\n{% asset_img cap6.PNG [cap6] %}\n위에 사용한건 상대경로이기 때문에 Home 화면을 제외한 곳에서 포스트를 보게 되면 찾을 수가 다.","slug":"03-Hexo","published":1,"updated":"2019-04-04T08:20:19.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emgm20006w4ulx3dvhfzo","content":"<h3 id=\"1-Tag-Plugins\"><a href=\"#1-Tag-Plugins\" class=\"headerlink\" title=\"1. Tag Plugins\"></a>1. Tag Plugins</h3><hr>\n<p>Hexo는 마크다운 외에 포스트를 작성하기 위해 Tag Plugin이라는 자체적인 문법을 지원</p>\n<h4 id=\"1-1-인용-구문\"><a href=\"#1-1-인용-구문\" class=\"headerlink\" title=\"1.1 인용 구문\"></a>1.1 인용 구문</h4><hr>\n<p><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote 신동욱, 대학원생 https://github.com/nawook96 %&#125;</span><br><span class=\"line\">배고프다</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><blockquote><p>배고프다</p>\n<footer><strong>신동욱, 대학원생</strong><cite><a href=\"https://github.com/nawook96\" target=\"_blank\" rel=\"noopener\">github.com/nawook96</a></cite></footer></blockquote></p>\n<h4 id=\"1-2-코드-삽입\"><a href=\"#1-2-코드-삽입\" class=\"headerlink\" title=\"1.2 코드 삽입\"></a>1.2 코드 삽입</h4><hr>\n<p>lang은 <a href=\"https://highlightjs.org\" target=\"_blank\" rel=\"noopener\">https://highlightjs.org</a> 에서 지원하는 언어만 나옴(highlight), 파일명 명시도 가능<br><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock lang:objc hi.h%&#125;</span><br><span class=\"line\">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><figure class=\"highlight objc\"><figcaption><span>hi.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[rectangle setX: <span class=\"number\">10</span> y: <span class=\"number\">10</span> width: <span class=\"number\">20</span> height: <span class=\"number\">20</span>];</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-YOUTUBE-삽입\"><a href=\"#1-3-YOUTUBE-삽입\" class=\"headerlink\" title=\"1.3 YOUTUBE 삽입\"></a>1.3 YOUTUBE 삽입</h4><hr>\n<p><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube Z0ti3pBKmes %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/Z0ti3pBKmes\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n<h4 id=\"1-4-Asset-삽입\"><a href=\"#1-4-Asset-삽입\" class=\"headerlink\" title=\"1.4 Asset 삽입\"></a><strong>1.4 Asset 삽입</strong></h4><hr>\n<p>이미지 삽입에서 추가 설명<br><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-disqus-추가하기\"><a href=\"#2-disqus-추가하기\" class=\"headerlink\" title=\"2. disqus 추가하기\"></a>2. disqus 추가하기</h3><hr>\n<ol>\n<li>disqus 가입하기</li>\n<li>I want to comment on site 클릭</li>\n<li>edit profile -&gt; Acount에서 username 설정하기</li>\n<li><a href=\"https://disqus.com/profile/signup/intent/\" target=\"_blank\" rel=\"noopener\">https://disqus.com/profile/signup/intent/</a> I want to install Disqus on my site 클릭 &amp; 설정</li>\n<li>hexo 폴더의 _config.yml 편집</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus_shortname: username</span><br></pre></td></tr></table></figure>\n<ul>\n<li>disqus site를 만들 때 한국어 설정이 안보이는경우가 있습니다. </li>\n<li>이때는 개발자 도구를 열어 수정하면 사용가능합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/55462622-27f17580-5632-11e9-9890-4f4b5191cee5.PNG\" alt=\"캡처\"></p>\n<ul>\n<li>맨 마지막 줄 추가!</li>\n</ul>\n<h3 id=\"3-Hexo-Blog에-image-추가\"><a href=\"#3-Hexo-Blog에-image-추가\" class=\"headerlink\" title=\"3. Hexo Blog에 image 추가\"></a>3. Hexo Blog에 image 추가</h3><hr>\n<p>hexo는 source 폴더의 자원을 가지고 generate를 할 때 public 폴더를 생성합니다.</p>\n<ul>\n<li>전역자원 폴더(/source)</li>\n</ul>\n<p>/source/images라는 폴더를 사용하면 어느 포스트던 폴더 내 자원사용이 가능합니다.</p>\n<ul>\n<li>포스트 자원 폴더</li>\n</ul>\n<p>전역 폴더에서 모든 파일을 관리하는 것이 아니라 포스트마다 폴더를 만들어 관리할 수 있습니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Writing</span><br><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n<p>hexo 블로그 폴더의 _config.yml에서 위와 같이 변경하면 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new</span><br></pre></td></tr></table></figure>\n<p>를 할때마다 폴더가 함께 생성됩니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](./folder/img.png)</span><br></pre></td></tr></table></figure>\n<p>전역자원 폴더에 비해 상대경로로 빠르게 접근 가능하다는 장점이 있습니다.</p>\n<h4 id=\"3-1-Asset을-이용하여-image-추가\"><a href=\"#3-1-Asset을-이용하여-image-추가\" class=\"headerlink\" title=\"3.1 Asset을 이용하여 image 추가\"></a>3.1 Asset을 이용하여 image 추가</h4><hr>\n<img src=\"/2019/04/04/03-Hexo/cap1.PNG\" title=\"[cap1]\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &quot;blahblah&quot;</span><br></pre></td></tr></table></figure>\n<p>다음 명령 실행시 같은 경로에 blahblah 폴더가 같이 생성됨<br><img src=\"/2019/04/04/03-Hexo/cap2.PNG\" title=\"[cap2]\"><br><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img cap1.PNG [cap2] %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><img src=\"/2019/04/04/03-Hexo/cap1.PNG\" title=\"[result1]\"></p>\n<img src=\"/2019/04/04/03-Hexo/cap3.PNG\" title=\"[cap3]\">\n<img src=\"/2019/04/04/03-Hexo/cap4.PNG\" title=\"[cap4]\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[📃 PDF FILE ](../pdf/Git.pdf)</span><br><span class=\"line\">&#123;% asset_link Git.pdf 📃 PDF FILE %&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>어떻게 다를까?</strong><br><img src=\"/2019/04/04/03-Hexo/cap5.PNG\" title=\"[cap5]\"><br><img src=\"/2019/04/04/03-Hexo/cap6.PNG\" title=\"[cap6]\"><br>위에 사용한건 상대경로이기 때문에 Home 화면을 제외한 곳에서 포스트를 보게 되면 찾을 수가 다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Tag-Plugins\"><a href=\"#1-Tag-Plugins\" class=\"headerlink\" title=\"1. Tag Plugins\"></a>1. Tag Plugins</h3><hr>\n<p>Hexo는 마크다운 외에 포스트를 작성하기 위해 Tag Plugin이라는 자체적인 문법을 지원</p>\n<h4 id=\"1-1-인용-구문\"><a href=\"#1-1-인용-구문\" class=\"headerlink\" title=\"1.1 인용 구문\"></a>1.1 인용 구문</h4><hr>\n<p><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote 신동욱, 대학원생 https://github.com/nawook96 %&#125;</span><br><span class=\"line\">배고프다</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><blockquote><p>배고프다</p>\n<footer><strong>신동욱, 대학원생</strong><cite><a href=\"https://github.com/nawook96\" target=\"_blank\" rel=\"noopener\">github.com/nawook96</a></cite></footer></blockquote></p>\n<h4 id=\"1-2-코드-삽입\"><a href=\"#1-2-코드-삽입\" class=\"headerlink\" title=\"1.2 코드 삽입\"></a>1.2 코드 삽입</h4><hr>\n<p>lang은 <a href=\"https://highlightjs.org\" target=\"_blank\" rel=\"noopener\">https://highlightjs.org</a> 에서 지원하는 언어만 나옴(highlight), 파일명 명시도 가능<br><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock lang:objc hi.h%&#125;</span><br><span class=\"line\">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><figure class=\"highlight objc\"><figcaption><span>hi.h</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[rectangle setX: <span class=\"number\">10</span> y: <span class=\"number\">10</span> width: <span class=\"number\">20</span> height: <span class=\"number\">20</span>];</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-YOUTUBE-삽입\"><a href=\"#1-3-YOUTUBE-삽입\" class=\"headerlink\" title=\"1.3 YOUTUBE 삽입\"></a>1.3 YOUTUBE 삽입</h4><hr>\n<p><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube Z0ti3pBKmes %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/Z0ti3pBKmes\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n<h4 id=\"1-4-Asset-삽입\"><a href=\"#1-4-Asset-삽입\" class=\"headerlink\" title=\"1.4 Asset 삽입\"></a><strong>1.4 Asset 삽입</strong></h4><hr>\n<p>이미지 삽입에서 추가 설명<br><strong>How to use</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-disqus-추가하기\"><a href=\"#2-disqus-추가하기\" class=\"headerlink\" title=\"2. disqus 추가하기\"></a>2. disqus 추가하기</h3><hr>\n<ol>\n<li>disqus 가입하기</li>\n<li>I want to comment on site 클릭</li>\n<li>edit profile -&gt; Acount에서 username 설정하기</li>\n<li><a href=\"https://disqus.com/profile/signup/intent/\" target=\"_blank\" rel=\"noopener\">https://disqus.com/profile/signup/intent/</a> I want to install Disqus on my site 클릭 &amp; 설정</li>\n<li>hexo 폴더의 _config.yml 편집</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus_shortname: username</span><br></pre></td></tr></table></figure>\n<ul>\n<li>disqus site를 만들 때 한국어 설정이 안보이는경우가 있습니다. </li>\n<li>이때는 개발자 도구를 열어 수정하면 사용가능합니다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/55462622-27f17580-5632-11e9-9890-4f4b5191cee5.PNG\" alt=\"캡처\"></p>\n<ul>\n<li>맨 마지막 줄 추가!</li>\n</ul>\n<h3 id=\"3-Hexo-Blog에-image-추가\"><a href=\"#3-Hexo-Blog에-image-추가\" class=\"headerlink\" title=\"3. Hexo Blog에 image 추가\"></a>3. Hexo Blog에 image 추가</h3><hr>\n<p>hexo는 source 폴더의 자원을 가지고 generate를 할 때 public 폴더를 생성합니다.</p>\n<ul>\n<li>전역자원 폴더(/source)</li>\n</ul>\n<p>/source/images라는 폴더를 사용하면 어느 포스트던 폴더 내 자원사용이 가능합니다.</p>\n<ul>\n<li>포스트 자원 폴더</li>\n</ul>\n<p>전역 폴더에서 모든 파일을 관리하는 것이 아니라 포스트마다 폴더를 만들어 관리할 수 있습니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Writing</span><br><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n<p>hexo 블로그 폴더의 _config.yml에서 위와 같이 변경하면 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new</span><br></pre></td></tr></table></figure>\n<p>를 할때마다 폴더가 함께 생성됩니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](./folder/img.png)</span><br></pre></td></tr></table></figure>\n<p>전역자원 폴더에 비해 상대경로로 빠르게 접근 가능하다는 장점이 있습니다.</p>\n<h4 id=\"3-1-Asset을-이용하여-image-추가\"><a href=\"#3-1-Asset을-이용하여-image-추가\" class=\"headerlink\" title=\"3.1 Asset을 이용하여 image 추가\"></a>3.1 Asset을 이용하여 image 추가</h4><hr>\n<img src=\"/2019/04/04/03-Hexo/cap1.PNG\" title=\"[cap1]\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &quot;blahblah&quot;</span><br></pre></td></tr></table></figure>\n<p>다음 명령 실행시 같은 경로에 blahblah 폴더가 같이 생성됨<br><img src=\"/2019/04/04/03-Hexo/cap2.PNG\" title=\"[cap2]\"><br><strong>Example</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img cap1.PNG [cap2] %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Result</strong><br><img src=\"/2019/04/04/03-Hexo/cap1.PNG\" title=\"[result1]\"></p>\n<img src=\"/2019/04/04/03-Hexo/cap3.PNG\" title=\"[cap3]\">\n<img src=\"/2019/04/04/03-Hexo/cap4.PNG\" title=\"[cap4]\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[📃 PDF FILE ](../pdf/Git.pdf)</span><br><span class=\"line\">&#123;% asset_link Git.pdf 📃 PDF FILE %&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>어떻게 다를까?</strong><br><img src=\"/2019/04/04/03-Hexo/cap5.PNG\" title=\"[cap5]\"><br><img src=\"/2019/04/04/03-Hexo/cap6.PNG\" title=\"[cap6]\"><br>위에 사용한건 상대경로이기 때문에 Home 화면을 제외한 곳에서 포스트를 보게 되면 찾을 수가 다.</p>\n"},{"title":"01_Pandas","date":"2019-04-04T04:35:51.000Z","_content":"## 1. Pandas\n\nPython Data Analysis Library\n\n+ 파이썬에서 사용하는 데이터분석 라이브러리\n\n+ 행과 열로 이루어진 데이터 객체를 만들어 다룰 수 있게 함.\n\n+ 보다 안정적으로 대용량의 데이터들을 처리하는데 매우 편리한 도구\n\n\n## 2. Pandas 자료 구조 \n\n+ 1차원 자료구조 : Series\n\n+ 2차원 자료구조 : DataFrame\n\n+ 3차원 자료구조 : Panel\n\n\n### (1) Series\n\n Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). \n\n+ 가장 간단한 1차원 자료구조\n\n+ Series는 배열/리스트와 같은 일련의 시퀀스 데이타를 받아들인다.\n\n+ 별도의 인덱스 레이블을 지정하지 않으면 자동적으로 0부터 시작되는 디폴트 정수 \n인덱스를 사용한다.\n\n+ 선언 >>> s = pd.Series(data, index=index)\n\n```\nimport pandas as pd\n\nobj = pd.Series([4, 7, -5, 3])\n```\n\n### (2) DataFrame\n\n DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object. \n\n+ 2차원 자료구조\n\n+ DataFrame는 행과 열이 있는 테이블 데이타(Tabular Data)를 받아들인다. \n\n+ 이는 python의 dictionary 또는 numpy의 array로 정의할 수 있다.\n\n```\ndata = {'name' : ['Beomwoo', 'Beomwoo', 'Beomwoo', 'Kim', 'Park'], 'year':[2016, 2014, 2015, 2016, 2017]}, 'points' : [1.5, 1.7, 3.6, 2.4, 2.9]}\n\ndf = pd.DataFrame(data)\n```\n|  <center>name</center> |  <center>year</center> |  <center>points</center> |\n|:--------|:--------:|--------:|\n|Beomwoo | <center>2016 </center> |1.5 |\n|Beomwoo | <center>2014 </center> |1.7 |\n|Beomwoo | <center>2015 </center> |3.6 |\n|Kim | <center>2016 </center> |2.4 |\n|Park | <center>2017 </center> |2.9 |\n\n### (3) Panel\n\n Panel is a somewhat less-used, but still important container for 3-dimensional data. The term panel data is derived from econometrics and is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data and, in particular, econometric analysis of panel data.\n\n+ 3차원 자료구조\n\n+ Panel은 Axis 0 (items), Axis 1 (major_axis), Axis 2 (minor_axis) 등 3개의 축을 가지고 있다\n\n+ Axis 0은 그 한 요소가 2차원의 DataFrame 에 해당되며, Axis 1은 DataFrame의 행(row)에 해당되고, Axis 2는 DataFrame의 열(column)에 해당된다.\n\n+아래 예제는 numpy를 사용하여 3차원 난수를 발생시킨 후, 이를 pandas.Panel()에 적용한 예이다.\n```\ndata = np.random.rand(2,3,4)\np = pd.Panel(data)\n```\n2(items) * 3(major axis) * 4(miner axis)  크기의 Panel 객체가 생성되었음을 알 수 있다.\nPanel 객체 p로부터 p[0]을 조회하면, Axis 0의 첫번째 요소인 DataFrame이 출력됨을 볼 수 있다.\n\n\n## 3. 데이터 액세스\n\n+ Indexing, arrtibute 사용 \n```\ndf['year'] #year column 출력 \ndf.year #위에와 같은 의미\n```\n+ Boolean indexing : 특정 조건의 데이터만 필터링 \n```\ndf[df['year']>2016] #df자료에서 year이 2016보다 큰 행만 출력 \n```\n+ 데이터 양이 많은 경우\n```\ndf.head() #기본적으로 앞 5개, 데이터의 개수를 인자로 넣으면 그 만큼의 데이터를 보여준다.\ndf.tail() #기본적으로 뒤 5개, 위와 같다.\n```\n+ 다양한 연산 함수 : sum(), mean(), max(), min(), describe() ...\n\n+ 1주차 피드백 : 첫번째 행에서 첫번째 열 뽑기 \n```\nprint(df.loc[df.index[0], df.columns[0]]) #.loc는 [인덱스(행)명, 칼럼(열)명]으로 접근 가능하다\nprint(df.iloc[0,0]) #.iloc는 index숫자로써 가져온다.\n```\n\n\n## 4. 외부 데이터 읽고 쓰기\n\n + pandas는 CSV 파일, 텍스트 파일, 엑셀 파일, SQL 데이타베이스, HDF5 포맷 등 다양한 외부 리소스에 데이타를 읽고 쓸 수 있는 기능을 제공\n\n```\ndf = pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA']) #읽기\ndf = pd.to_excel('foo.xlsx', sheet_name='Sheet1') #쓰기\n\n```\n\n## 참고 출처 \n\n+ [예제로 배우는 Python 프로그래밍 : Pandas데이터 분석](http://pythonstudy.xyz/python/article/408-pandas-%EB%8D%B0%EC%9D%B4%ED%83%80-%EB%B6%84%EC%84%9D)\n\n+ [Pandas 기초 정리](https://doorbw.tistory.com/172)\n\n+ [pandas 데이터 구조 소개](https://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html)\n","source":"_posts/01-Pandas.md","raw":"---\ntitle: 01_Pandas\ndate: 2019-04-04 13:35:51\ntags: Python\ncategories: Python\n---\n## 1. Pandas\n\nPython Data Analysis Library\n\n+ 파이썬에서 사용하는 데이터분석 라이브러리\n\n+ 행과 열로 이루어진 데이터 객체를 만들어 다룰 수 있게 함.\n\n+ 보다 안정적으로 대용량의 데이터들을 처리하는데 매우 편리한 도구\n\n\n## 2. Pandas 자료 구조 \n\n+ 1차원 자료구조 : Series\n\n+ 2차원 자료구조 : DataFrame\n\n+ 3차원 자료구조 : Panel\n\n\n### (1) Series\n\n Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). \n\n+ 가장 간단한 1차원 자료구조\n\n+ Series는 배열/리스트와 같은 일련의 시퀀스 데이타를 받아들인다.\n\n+ 별도의 인덱스 레이블을 지정하지 않으면 자동적으로 0부터 시작되는 디폴트 정수 \n인덱스를 사용한다.\n\n+ 선언 >>> s = pd.Series(data, index=index)\n\n```\nimport pandas as pd\n\nobj = pd.Series([4, 7, -5, 3])\n```\n\n### (2) DataFrame\n\n DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object. \n\n+ 2차원 자료구조\n\n+ DataFrame는 행과 열이 있는 테이블 데이타(Tabular Data)를 받아들인다. \n\n+ 이는 python의 dictionary 또는 numpy의 array로 정의할 수 있다.\n\n```\ndata = {'name' : ['Beomwoo', 'Beomwoo', 'Beomwoo', 'Kim', 'Park'], 'year':[2016, 2014, 2015, 2016, 2017]}, 'points' : [1.5, 1.7, 3.6, 2.4, 2.9]}\n\ndf = pd.DataFrame(data)\n```\n|  <center>name</center> |  <center>year</center> |  <center>points</center> |\n|:--------|:--------:|--------:|\n|Beomwoo | <center>2016 </center> |1.5 |\n|Beomwoo | <center>2014 </center> |1.7 |\n|Beomwoo | <center>2015 </center> |3.6 |\n|Kim | <center>2016 </center> |2.4 |\n|Park | <center>2017 </center> |2.9 |\n\n### (3) Panel\n\n Panel is a somewhat less-used, but still important container for 3-dimensional data. The term panel data is derived from econometrics and is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data and, in particular, econometric analysis of panel data.\n\n+ 3차원 자료구조\n\n+ Panel은 Axis 0 (items), Axis 1 (major_axis), Axis 2 (minor_axis) 등 3개의 축을 가지고 있다\n\n+ Axis 0은 그 한 요소가 2차원의 DataFrame 에 해당되며, Axis 1은 DataFrame의 행(row)에 해당되고, Axis 2는 DataFrame의 열(column)에 해당된다.\n\n+아래 예제는 numpy를 사용하여 3차원 난수를 발생시킨 후, 이를 pandas.Panel()에 적용한 예이다.\n```\ndata = np.random.rand(2,3,4)\np = pd.Panel(data)\n```\n2(items) * 3(major axis) * 4(miner axis)  크기의 Panel 객체가 생성되었음을 알 수 있다.\nPanel 객체 p로부터 p[0]을 조회하면, Axis 0의 첫번째 요소인 DataFrame이 출력됨을 볼 수 있다.\n\n\n## 3. 데이터 액세스\n\n+ Indexing, arrtibute 사용 \n```\ndf['year'] #year column 출력 \ndf.year #위에와 같은 의미\n```\n+ Boolean indexing : 특정 조건의 데이터만 필터링 \n```\ndf[df['year']>2016] #df자료에서 year이 2016보다 큰 행만 출력 \n```\n+ 데이터 양이 많은 경우\n```\ndf.head() #기본적으로 앞 5개, 데이터의 개수를 인자로 넣으면 그 만큼의 데이터를 보여준다.\ndf.tail() #기본적으로 뒤 5개, 위와 같다.\n```\n+ 다양한 연산 함수 : sum(), mean(), max(), min(), describe() ...\n\n+ 1주차 피드백 : 첫번째 행에서 첫번째 열 뽑기 \n```\nprint(df.loc[df.index[0], df.columns[0]]) #.loc는 [인덱스(행)명, 칼럼(열)명]으로 접근 가능하다\nprint(df.iloc[0,0]) #.iloc는 index숫자로써 가져온다.\n```\n\n\n## 4. 외부 데이터 읽고 쓰기\n\n + pandas는 CSV 파일, 텍스트 파일, 엑셀 파일, SQL 데이타베이스, HDF5 포맷 등 다양한 외부 리소스에 데이타를 읽고 쓸 수 있는 기능을 제공\n\n```\ndf = pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA']) #읽기\ndf = pd.to_excel('foo.xlsx', sheet_name='Sheet1') #쓰기\n\n```\n\n## 참고 출처 \n\n+ [예제로 배우는 Python 프로그래밍 : Pandas데이터 분석](http://pythonstudy.xyz/python/article/408-pandas-%EB%8D%B0%EC%9D%B4%ED%83%80-%EB%B6%84%EC%84%9D)\n\n+ [Pandas 기초 정리](https://doorbw.tistory.com/172)\n\n+ [pandas 데이터 구조 소개](https://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html)\n","slug":"01-Pandas","published":1,"updated":"2019-04-04T04:45:35.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emgm6000aw4ulnk8bxfu6","content":"<h2 id=\"1-Pandas\"><a href=\"#1-Pandas\" class=\"headerlink\" title=\"1. Pandas\"></a>1. Pandas</h2><p>Python Data Analysis Library</p>\n<ul>\n<li><p>파이썬에서 사용하는 데이터분석 라이브러리</p>\n</li>\n<li><p>행과 열로 이루어진 데이터 객체를 만들어 다룰 수 있게 함.</p>\n</li>\n<li><p>보다 안정적으로 대용량의 데이터들을 처리하는데 매우 편리한 도구</p>\n</li>\n</ul>\n<h2 id=\"2-Pandas-자료-구조\"><a href=\"#2-Pandas-자료-구조\" class=\"headerlink\" title=\"2. Pandas 자료 구조\"></a>2. Pandas 자료 구조</h2><ul>\n<li><p>1차원 자료구조 : Series</p>\n</li>\n<li><p>2차원 자료구조 : DataFrame</p>\n</li>\n<li><p>3차원 자료구조 : Panel</p>\n</li>\n</ul>\n<h3 id=\"1-Series\"><a href=\"#1-Series\" class=\"headerlink\" title=\"(1) Series\"></a>(1) Series</h3><p> Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). </p>\n<ul>\n<li><p>가장 간단한 1차원 자료구조</p>\n</li>\n<li><p>Series는 배열/리스트와 같은 일련의 시퀀스 데이타를 받아들인다.</p>\n</li>\n<li><p>별도의 인덱스 레이블을 지정하지 않으면 자동적으로 0부터 시작되는 디폴트 정수<br>인덱스를 사용한다.</p>\n</li>\n<li><p>선언 &gt;&gt;&gt; s = pd.Series(data, index=index)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\"></span><br><span class=\"line\">obj = pd.Series([4, 7, -5, 3])</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-DataFrame\"><a href=\"#2-DataFrame\" class=\"headerlink\" title=\"(2) DataFrame\"></a>(2) DataFrame</h3><p> DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object. </p>\n<ul>\n<li><p>2차원 자료구조</p>\n</li>\n<li><p>DataFrame는 행과 열이 있는 테이블 데이타(Tabular Data)를 받아들인다. </p>\n</li>\n<li><p>이는 python의 dictionary 또는 numpy의 array로 정의할 수 있다.</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;&apos;name&apos; : [&apos;Beomwoo&apos;, &apos;Beomwoo&apos;, &apos;Beomwoo&apos;, &apos;Kim&apos;, &apos;Park&apos;], &apos;year&apos;:[2016, 2014, 2015, 2016, 2017]&#125;, &apos;points&apos; : [1.5, 1.7, 3.6, 2.4, 2.9]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><center>name</center></th>\n<th style=\"text-align:center\"><center>year</center></th>\n<th style=\"text-align:right\"><center>points</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Beomwoo</td>\n<td style=\"text-align:center\"><center>2016 </center></td>\n<td style=\"text-align:right\">1.5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Beomwoo</td>\n<td style=\"text-align:center\"><center>2014 </center></td>\n<td style=\"text-align:right\">1.7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Beomwoo</td>\n<td style=\"text-align:center\"><center>2015 </center></td>\n<td style=\"text-align:right\">3.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kim</td>\n<td style=\"text-align:center\"><center>2016 </center></td>\n<td style=\"text-align:right\">2.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Park</td>\n<td style=\"text-align:center\"><center>2017 </center></td>\n<td style=\"text-align:right\">2.9</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-Panel\"><a href=\"#3-Panel\" class=\"headerlink\" title=\"(3) Panel\"></a>(3) Panel</h3><p> Panel is a somewhat less-used, but still important container for 3-dimensional data. The term panel data is derived from econometrics and is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data and, in particular, econometric analysis of panel data.</p>\n<ul>\n<li><p>3차원 자료구조</p>\n</li>\n<li><p>Panel은 Axis 0 (items), Axis 1 (major_axis), Axis 2 (minor_axis) 등 3개의 축을 가지고 있다</p>\n</li>\n<li><p>Axis 0은 그 한 요소가 2차원의 DataFrame 에 해당되며, Axis 1은 DataFrame의 행(row)에 해당되고, Axis 2는 DataFrame의 열(column)에 해당된다.</p>\n</li>\n</ul>\n<p>+아래 예제는 numpy를 사용하여 3차원 난수를 발생시킨 후, 이를 pandas.Panel()에 적용한 예이다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = np.random.rand(2,3,4)</span><br><span class=\"line\">p = pd.Panel(data)</span><br></pre></td></tr></table></figure></p>\n<p>2(items) <em> 3(major axis) </em> 4(miner axis)  크기의 Panel 객체가 생성되었음을 알 수 있다.<br>Panel 객체 p로부터 p[0]을 조회하면, Axis 0의 첫번째 요소인 DataFrame이 출력됨을 볼 수 있다.</p>\n<h2 id=\"3-데이터-액세스\"><a href=\"#3-데이터-액세스\" class=\"headerlink\" title=\"3. 데이터 액세스\"></a>3. 데이터 액세스</h2><ul>\n<li><p>Indexing, arrtibute 사용 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[&apos;year&apos;] #year column 출력 </span><br><span class=\"line\">df.year #위에와 같은 의미</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Boolean indexing : 특정 조건의 데이터만 필터링 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[df[&apos;year&apos;]&gt;2016] #df자료에서 year이 2016보다 큰 행만 출력</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>데이터 양이 많은 경우</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.head() #기본적으로 앞 5개, 데이터의 개수를 인자로 넣으면 그 만큼의 데이터를 보여준다.</span><br><span class=\"line\">df.tail() #기본적으로 뒤 5개, 위와 같다.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>다양한 연산 함수 : sum(), mean(), max(), min(), describe() …</p>\n</li>\n<li><p>1주차 피드백 : 첫번째 행에서 첫번째 열 뽑기 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df.loc[df.index[0], df.columns[0]]) #.loc는 [인덱스(행)명, 칼럼(열)명]으로 접근 가능하다</span><br><span class=\"line\">print(df.iloc[0,0]) #.iloc는 index숫자로써 가져온다.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"4-외부-데이터-읽고-쓰기\"><a href=\"#4-외부-데이터-읽고-쓰기\" class=\"headerlink\" title=\"4. 외부 데이터 읽고 쓰기\"></a>4. 외부 데이터 읽고 쓰기</h2><ul>\n<li>pandas는 CSV 파일, 텍스트 파일, 엑셀 파일, SQL 데이타베이스, HDF5 포맷 등 다양한 외부 리소스에 데이타를 읽고 쓸 수 있는 기능을 제공</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_excel(&apos;foo.xlsx&apos;, &apos;Sheet1&apos;, index_col=None, na_values=[&apos;NA&apos;]) #읽기</span><br><span class=\"line\">df = pd.to_excel(&apos;foo.xlsx&apos;, sheet_name=&apos;Sheet1&apos;) #쓰기</span><br></pre></td></tr></table></figure>\n<h2 id=\"참고-출처\"><a href=\"#참고-출처\" class=\"headerlink\" title=\"참고 출처\"></a>참고 출처</h2><ul>\n<li><p><a href=\"http://pythonstudy.xyz/python/article/408-pandas-%EB%8D%B0%EC%9D%B4%ED%83%80-%EB%B6%84%EC%84%9D\" target=\"_blank\" rel=\"noopener\">예제로 배우는 Python 프로그래밍 : Pandas데이터 분석</a></p>\n</li>\n<li><p><a href=\"https://doorbw.tistory.com/172\" target=\"_blank\" rel=\"noopener\">Pandas 기초 정리</a></p>\n</li>\n<li><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html\" target=\"_blank\" rel=\"noopener\">pandas 데이터 구조 소개</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Pandas\"><a href=\"#1-Pandas\" class=\"headerlink\" title=\"1. Pandas\"></a>1. Pandas</h2><p>Python Data Analysis Library</p>\n<ul>\n<li><p>파이썬에서 사용하는 데이터분석 라이브러리</p>\n</li>\n<li><p>행과 열로 이루어진 데이터 객체를 만들어 다룰 수 있게 함.</p>\n</li>\n<li><p>보다 안정적으로 대용량의 데이터들을 처리하는데 매우 편리한 도구</p>\n</li>\n</ul>\n<h2 id=\"2-Pandas-자료-구조\"><a href=\"#2-Pandas-자료-구조\" class=\"headerlink\" title=\"2. Pandas 자료 구조\"></a>2. Pandas 자료 구조</h2><ul>\n<li><p>1차원 자료구조 : Series</p>\n</li>\n<li><p>2차원 자료구조 : DataFrame</p>\n</li>\n<li><p>3차원 자료구조 : Panel</p>\n</li>\n</ul>\n<h3 id=\"1-Series\"><a href=\"#1-Series\" class=\"headerlink\" title=\"(1) Series\"></a>(1) Series</h3><p> Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). </p>\n<ul>\n<li><p>가장 간단한 1차원 자료구조</p>\n</li>\n<li><p>Series는 배열/리스트와 같은 일련의 시퀀스 데이타를 받아들인다.</p>\n</li>\n<li><p>별도의 인덱스 레이블을 지정하지 않으면 자동적으로 0부터 시작되는 디폴트 정수<br>인덱스를 사용한다.</p>\n</li>\n<li><p>선언 &gt;&gt;&gt; s = pd.Series(data, index=index)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\"></span><br><span class=\"line\">obj = pd.Series([4, 7, -5, 3])</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-DataFrame\"><a href=\"#2-DataFrame\" class=\"headerlink\" title=\"(2) DataFrame\"></a>(2) DataFrame</h3><p> DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object. </p>\n<ul>\n<li><p>2차원 자료구조</p>\n</li>\n<li><p>DataFrame는 행과 열이 있는 테이블 데이타(Tabular Data)를 받아들인다. </p>\n</li>\n<li><p>이는 python의 dictionary 또는 numpy의 array로 정의할 수 있다.</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;&apos;name&apos; : [&apos;Beomwoo&apos;, &apos;Beomwoo&apos;, &apos;Beomwoo&apos;, &apos;Kim&apos;, &apos;Park&apos;], &apos;year&apos;:[2016, 2014, 2015, 2016, 2017]&#125;, &apos;points&apos; : [1.5, 1.7, 3.6, 2.4, 2.9]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><center>name</center></th>\n<th style=\"text-align:center\"><center>year</center></th>\n<th style=\"text-align:right\"><center>points</center></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Beomwoo</td>\n<td style=\"text-align:center\"><center>2016 </center></td>\n<td style=\"text-align:right\">1.5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Beomwoo</td>\n<td style=\"text-align:center\"><center>2014 </center></td>\n<td style=\"text-align:right\">1.7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Beomwoo</td>\n<td style=\"text-align:center\"><center>2015 </center></td>\n<td style=\"text-align:right\">3.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kim</td>\n<td style=\"text-align:center\"><center>2016 </center></td>\n<td style=\"text-align:right\">2.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Park</td>\n<td style=\"text-align:center\"><center>2017 </center></td>\n<td style=\"text-align:right\">2.9</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-Panel\"><a href=\"#3-Panel\" class=\"headerlink\" title=\"(3) Panel\"></a>(3) Panel</h3><p> Panel is a somewhat less-used, but still important container for 3-dimensional data. The term panel data is derived from econometrics and is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data and, in particular, econometric analysis of panel data.</p>\n<ul>\n<li><p>3차원 자료구조</p>\n</li>\n<li><p>Panel은 Axis 0 (items), Axis 1 (major_axis), Axis 2 (minor_axis) 등 3개의 축을 가지고 있다</p>\n</li>\n<li><p>Axis 0은 그 한 요소가 2차원의 DataFrame 에 해당되며, Axis 1은 DataFrame의 행(row)에 해당되고, Axis 2는 DataFrame의 열(column)에 해당된다.</p>\n</li>\n</ul>\n<p>+아래 예제는 numpy를 사용하여 3차원 난수를 발생시킨 후, 이를 pandas.Panel()에 적용한 예이다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = np.random.rand(2,3,4)</span><br><span class=\"line\">p = pd.Panel(data)</span><br></pre></td></tr></table></figure></p>\n<p>2(items) <em> 3(major axis) </em> 4(miner axis)  크기의 Panel 객체가 생성되었음을 알 수 있다.<br>Panel 객체 p로부터 p[0]을 조회하면, Axis 0의 첫번째 요소인 DataFrame이 출력됨을 볼 수 있다.</p>\n<h2 id=\"3-데이터-액세스\"><a href=\"#3-데이터-액세스\" class=\"headerlink\" title=\"3. 데이터 액세스\"></a>3. 데이터 액세스</h2><ul>\n<li><p>Indexing, arrtibute 사용 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[&apos;year&apos;] #year column 출력 </span><br><span class=\"line\">df.year #위에와 같은 의미</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Boolean indexing : 특정 조건의 데이터만 필터링 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[df[&apos;year&apos;]&gt;2016] #df자료에서 year이 2016보다 큰 행만 출력</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>데이터 양이 많은 경우</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.head() #기본적으로 앞 5개, 데이터의 개수를 인자로 넣으면 그 만큼의 데이터를 보여준다.</span><br><span class=\"line\">df.tail() #기본적으로 뒤 5개, 위와 같다.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>다양한 연산 함수 : sum(), mean(), max(), min(), describe() …</p>\n</li>\n<li><p>1주차 피드백 : 첫번째 행에서 첫번째 열 뽑기 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df.loc[df.index[0], df.columns[0]]) #.loc는 [인덱스(행)명, 칼럼(열)명]으로 접근 가능하다</span><br><span class=\"line\">print(df.iloc[0,0]) #.iloc는 index숫자로써 가져온다.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"4-외부-데이터-읽고-쓰기\"><a href=\"#4-외부-데이터-읽고-쓰기\" class=\"headerlink\" title=\"4. 외부 데이터 읽고 쓰기\"></a>4. 외부 데이터 읽고 쓰기</h2><ul>\n<li>pandas는 CSV 파일, 텍스트 파일, 엑셀 파일, SQL 데이타베이스, HDF5 포맷 등 다양한 외부 리소스에 데이타를 읽고 쓸 수 있는 기능을 제공</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_excel(&apos;foo.xlsx&apos;, &apos;Sheet1&apos;, index_col=None, na_values=[&apos;NA&apos;]) #읽기</span><br><span class=\"line\">df = pd.to_excel(&apos;foo.xlsx&apos;, sheet_name=&apos;Sheet1&apos;) #쓰기</span><br></pre></td></tr></table></figure>\n<h2 id=\"참고-출처\"><a href=\"#참고-출처\" class=\"headerlink\" title=\"참고 출처\"></a>참고 출처</h2><ul>\n<li><p><a href=\"http://pythonstudy.xyz/python/article/408-pandas-%EB%8D%B0%EC%9D%B4%ED%83%80-%EB%B6%84%EC%84%9D\" target=\"_blank\" rel=\"noopener\">예제로 배우는 Python 프로그래밍 : Pandas데이터 분석</a></p>\n</li>\n<li><p><a href=\"https://doorbw.tistory.com/172\" target=\"_blank\" rel=\"noopener\">Pandas 기초 정리</a></p>\n</li>\n<li><p><a href=\"https://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html\" target=\"_blank\" rel=\"noopener\">pandas 데이터 구조 소개</a></p>\n</li>\n</ul>\n"},{"title":"02_Park_Git","date":"2019-04-04T04:52:54.000Z","_content":"## 💡 Intro\nGit Branch 관련된 자료 \n\n___\n## 💡 Index\n\n👉 Git  \n\n👉 Branch CMD\n\n👉 Branch Practice\n\n___\n\n## 💡 Git Base\n### 👉 PDF Attached\n**[📃 PDF FILE ](../pdf/Git.pdf)** \n{% asset_link Git.pdf 📃 PDF FILE %}\n___\n\n## 💡 Branch CMD\n### 👉 Why Using the Branch system ?\n[\"A successful Git branching model\" 컬럼](https://backlog.com/git-tutorial/kr/stepup/stepup1_5.html)\n\n원문 : http://nvie.com/posts/a-successful-git-branching-model/\n### 👉 CRUD\n```bash\n### Create and Switch \n$ git branch iss53 # 브런치 만들고 \n$ git checkout iss53 # 전환\n# 두개를 하나로 줄이면\n$ git checkout -b iss53\n\n### Push\n$ git checkout iss53\n$ git add -u \n$ git commit -m \"YOUR MESSAGE\"\n$ git push origin iss53\n\n### Merge\n$ git checkout master\n$ git merge iss53\n\n### Branch List\n$ git Branch\n\n### Delete\n$ git branch -d iss53\n```\n___\n\n## 💡 Branch Practice\n### 👉 To-Do\n1. Master 에서 아무 Py 파일 하나 만들어서 tracking 후\n2. dev 브런치를 판다. \n3. 이동해서 1번에서 만든 파일을 수정 \n4. master Branch에 merge \n___\n\n## 💡 Ref Link\n* [누구나 쉽게 이해할수있는 Git 입문](https://backlog.com/git-tutorial/kr/stepup/stepup1_1.html)\n* [Git-scm](https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%99%80-Merge%EC%9D%98-%EA%B8%B0%EC%B4%88)\n\n","source":"_posts/02-Park-Git.md","raw":"---\ntitle: 02_Park_Git\ndate: 2019-04-04 13:52:54\ntags: Git\ncategories: Git\n---\n## 💡 Intro\nGit Branch 관련된 자료 \n\n___\n## 💡 Index\n\n👉 Git  \n\n👉 Branch CMD\n\n👉 Branch Practice\n\n___\n\n## 💡 Git Base\n### 👉 PDF Attached\n**[📃 PDF FILE ](../pdf/Git.pdf)** \n{% asset_link Git.pdf 📃 PDF FILE %}\n___\n\n## 💡 Branch CMD\n### 👉 Why Using the Branch system ?\n[\"A successful Git branching model\" 컬럼](https://backlog.com/git-tutorial/kr/stepup/stepup1_5.html)\n\n원문 : http://nvie.com/posts/a-successful-git-branching-model/\n### 👉 CRUD\n```bash\n### Create and Switch \n$ git branch iss53 # 브런치 만들고 \n$ git checkout iss53 # 전환\n# 두개를 하나로 줄이면\n$ git checkout -b iss53\n\n### Push\n$ git checkout iss53\n$ git add -u \n$ git commit -m \"YOUR MESSAGE\"\n$ git push origin iss53\n\n### Merge\n$ git checkout master\n$ git merge iss53\n\n### Branch List\n$ git Branch\n\n### Delete\n$ git branch -d iss53\n```\n___\n\n## 💡 Branch Practice\n### 👉 To-Do\n1. Master 에서 아무 Py 파일 하나 만들어서 tracking 후\n2. dev 브런치를 판다. \n3. 이동해서 1번에서 만든 파일을 수정 \n4. master Branch에 merge \n___\n\n## 💡 Ref Link\n* [누구나 쉽게 이해할수있는 Git 입문](https://backlog.com/git-tutorial/kr/stepup/stepup1_1.html)\n* [Git-scm](https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%99%80-Merge%EC%9D%98-%EA%B8%B0%EC%B4%88)\n\n","slug":"02-Park-Git","published":1,"updated":"2019-04-04T05:52:38.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emgm8000bw4uljh5x4yv1","content":"<h2 id=\"💡-Intro\"><a href=\"#💡-Intro\" class=\"headerlink\" title=\"💡 Intro\"></a>💡 Intro</h2><p>Git Branch 관련된 자료 </p>\n<hr>\n<h2 id=\"💡-Index\"><a href=\"#💡-Index\" class=\"headerlink\" title=\"💡 Index\"></a>💡 Index</h2><p>👉 Git  </p>\n<p>👉 Branch CMD</p>\n<p>👉 Branch Practice</p>\n<hr>\n<h2 id=\"💡-Git-Base\"><a href=\"#💡-Git-Base\" class=\"headerlink\" title=\"💡 Git Base\"></a>💡 Git Base</h2><h3 id=\"👉-PDF-Attached\"><a href=\"#👉-PDF-Attached\" class=\"headerlink\" title=\"👉 PDF Attached\"></a>👉 PDF Attached</h3><p><strong><a href=\"../pdf/Git.pdf\">📃 PDF FILE </a></strong><br><a href=\"/2019/04/04/02-Park-Git/Git.pdf\" title=\"📃 PDF FILE\">📃 PDF FILE</a></p>\n<hr>\n<h2 id=\"💡-Branch-CMD\"><a href=\"#💡-Branch-CMD\" class=\"headerlink\" title=\"💡 Branch CMD\"></a>💡 Branch CMD</h2><h3 id=\"👉-Why-Using-the-Branch-system\"><a href=\"#👉-Why-Using-the-Branch-system\" class=\"headerlink\" title=\"👉 Why Using the Branch system ?\"></a>👉 Why Using the Branch system ?</h3><p><a href=\"https://backlog.com/git-tutorial/kr/stepup/stepup1_5.html\" target=\"_blank\" rel=\"noopener\">“A successful Git branching model” 컬럼</a></p>\n<p>원문 : <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener\">http://nvie.com/posts/a-successful-git-branching-model/</a></p>\n<h3 id=\"👉-CRUD\"><a href=\"#👉-CRUD\" class=\"headerlink\" title=\"👉 CRUD\"></a>👉 CRUD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### Create and Switch </span></span><br><span class=\"line\">$ git branch iss53 <span class=\"comment\"># 브런치 만들고 </span></span><br><span class=\"line\">$ git checkout iss53 <span class=\"comment\"># 전환</span></span><br><span class=\"line\"><span class=\"comment\"># 두개를 하나로 줄이면</span></span><br><span class=\"line\">$ git checkout -b iss53</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Push</span></span><br><span class=\"line\">$ git checkout iss53</span><br><span class=\"line\">$ git add -u </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"YOUR MESSAGE\"</span></span><br><span class=\"line\">$ git push origin iss53</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Merge</span></span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge iss53</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Branch List</span></span><br><span class=\"line\">$ git Branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Delete</span></span><br><span class=\"line\">$ git branch -d iss53</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"💡-Branch-Practice\"><a href=\"#💡-Branch-Practice\" class=\"headerlink\" title=\"💡 Branch Practice\"></a>💡 Branch Practice</h2><h3 id=\"👉-To-Do\"><a href=\"#👉-To-Do\" class=\"headerlink\" title=\"👉 To-Do\"></a>👉 To-Do</h3><ol>\n<li>Master 에서 아무 Py 파일 하나 만들어서 tracking 후</li>\n<li>dev 브런치를 판다. </li>\n<li>이동해서 1번에서 만든 파일을 수정 </li>\n<li>master Branch에 merge </li>\n</ol>\n<hr>\n<h2 id=\"💡-Ref-Link\"><a href=\"#💡-Ref-Link\" class=\"headerlink\" title=\"💡 Ref Link\"></a>💡 Ref Link</h2><ul>\n<li><a href=\"https://backlog.com/git-tutorial/kr/stepup/stepup1_1.html\" target=\"_blank\" rel=\"noopener\">누구나 쉽게 이해할수있는 Git 입문</a></li>\n<li><a href=\"https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%99%80-Merge%EC%9D%98-%EA%B8%B0%EC%B4%88\" target=\"_blank\" rel=\"noopener\">Git-scm</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"💡-Intro\"><a href=\"#💡-Intro\" class=\"headerlink\" title=\"💡 Intro\"></a>💡 Intro</h2><p>Git Branch 관련된 자료 </p>\n<hr>\n<h2 id=\"💡-Index\"><a href=\"#💡-Index\" class=\"headerlink\" title=\"💡 Index\"></a>💡 Index</h2><p>👉 Git  </p>\n<p>👉 Branch CMD</p>\n<p>👉 Branch Practice</p>\n<hr>\n<h2 id=\"💡-Git-Base\"><a href=\"#💡-Git-Base\" class=\"headerlink\" title=\"💡 Git Base\"></a>💡 Git Base</h2><h3 id=\"👉-PDF-Attached\"><a href=\"#👉-PDF-Attached\" class=\"headerlink\" title=\"👉 PDF Attached\"></a>👉 PDF Attached</h3><p><strong><a href=\"../pdf/Git.pdf\">📃 PDF FILE </a></strong><br><a href=\"/2019/04/04/02-Park-Git/Git.pdf\" title=\"📃 PDF FILE\">📃 PDF FILE</a></p>\n<hr>\n<h2 id=\"💡-Branch-CMD\"><a href=\"#💡-Branch-CMD\" class=\"headerlink\" title=\"💡 Branch CMD\"></a>💡 Branch CMD</h2><h3 id=\"👉-Why-Using-the-Branch-system\"><a href=\"#👉-Why-Using-the-Branch-system\" class=\"headerlink\" title=\"👉 Why Using the Branch system ?\"></a>👉 Why Using the Branch system ?</h3><p><a href=\"https://backlog.com/git-tutorial/kr/stepup/stepup1_5.html\" target=\"_blank\" rel=\"noopener\">“A successful Git branching model” 컬럼</a></p>\n<p>원문 : <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener\">http://nvie.com/posts/a-successful-git-branching-model/</a></p>\n<h3 id=\"👉-CRUD\"><a href=\"#👉-CRUD\" class=\"headerlink\" title=\"👉 CRUD\"></a>👉 CRUD</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### Create and Switch </span></span><br><span class=\"line\">$ git branch iss53 <span class=\"comment\"># 브런치 만들고 </span></span><br><span class=\"line\">$ git checkout iss53 <span class=\"comment\"># 전환</span></span><br><span class=\"line\"><span class=\"comment\"># 두개를 하나로 줄이면</span></span><br><span class=\"line\">$ git checkout -b iss53</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Push</span></span><br><span class=\"line\">$ git checkout iss53</span><br><span class=\"line\">$ git add -u </span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"YOUR MESSAGE\"</span></span><br><span class=\"line\">$ git push origin iss53</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Merge</span></span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge iss53</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Branch List</span></span><br><span class=\"line\">$ git Branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Delete</span></span><br><span class=\"line\">$ git branch -d iss53</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"💡-Branch-Practice\"><a href=\"#💡-Branch-Practice\" class=\"headerlink\" title=\"💡 Branch Practice\"></a>💡 Branch Practice</h2><h3 id=\"👉-To-Do\"><a href=\"#👉-To-Do\" class=\"headerlink\" title=\"👉 To-Do\"></a>👉 To-Do</h3><ol>\n<li>Master 에서 아무 Py 파일 하나 만들어서 tracking 후</li>\n<li>dev 브런치를 판다. </li>\n<li>이동해서 1번에서 만든 파일을 수정 </li>\n<li>master Branch에 merge </li>\n</ol>\n<hr>\n<h2 id=\"💡-Ref-Link\"><a href=\"#💡-Ref-Link\" class=\"headerlink\" title=\"💡 Ref Link\"></a>💡 Ref Link</h2><ul>\n<li><a href=\"https://backlog.com/git-tutorial/kr/stepup/stepup1_1.html\" target=\"_blank\" rel=\"noopener\">누구나 쉽게 이해할수있는 Git 입문</a></li>\n<li><a href=\"https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%99%80-Merge%EC%9D%98-%EA%B8%B0%EC%B4%88\" target=\"_blank\" rel=\"noopener\">Git-scm</a></li>\n</ul>\n"},{"title":"01_Hexo","date":"2019-04-04T05:03:09.000Z","_content":"## HEXO 블로그 만들기\n\n### 1. Node.js와 NPM 설치\n\n+ Node.js\n\n서버 사이드를 JavaScript로 구현할 수 있게 만든 런타임\n\n+ NPM\n\nNode.js기반의 모듈을 모아둔 집합\n\nhttps://nodejs.org/ko/\n\n\n\n---\n\n### 2. Hexo 설치\n\n```bash\n$ npm install -g hexo-cli\n```\n\n\n\n---\n\n### 3. 블로그 생성\n\n생성할 폴더에 접근 후 \n\n```bash\n$ hexo init myBlog\n$ cd myBlog\n$ npm install\n```\n\n![1553361798946](https://user-images.githubusercontent.com/36959292/54869831-83756500-4de1-11e9-97e5-1f472870035f.png)\n\n+ node_modules : 기본적인 node.js 모듈\n+ scaffolds : 페이지를 구성할 기본 markdown 파일\n+ source : 작성한 파일등 리소스\n+ theme : 테마\n+ .gitignore : github에 업로드 할때 제외할 파일 목록 정의\n+ _config.yml : 블로그의 옵션 설정\n\n\n\n---\n\n### 4. github에 연동하기\n\n자동으로 github에 업로드\n\n+ github repo를 만들때 주소를 JHyunB.github.io 로 함 \n\n+ _config.yml 파일 열고 아래처럼 수정\n\n![1553362281981](https://user-images.githubusercontent.com/36959292/54869834-99832580-4de1-11e9-8c4d-fd21267cf69e.png)\n\n\n\n+ 업로드하기 위한 모듈 설치\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\n\n\n+ hexo deploy 명령어 수행시 위에서 작성한 주소로 업로드\n\n\n\n---\n\n### 5. 포스트 생성\n\n```bash\n$ hexo new post first-post\n```\n\nsource/_posts 경로에 myfirstpost.md 생성\n\n\n\n---\n\n### 6. 빌드\n\n```bash\n$ hexo generate 또는 hexo g\n```\n\n+ hexo g 가능\n+ public 폴더가 생성됨\n\n![1553362948919](https://user-images.githubusercontent.com/36959292/54869839-a9026e80-4de1-11e9-8f7f-5cac8c91eaf1.png)\n\n+ 2019 : 포스트는 날짜별로 생성\n+ css : 테마에 맞게 생성\n+ index.html  : myfirstpost가 변경됨\n\n\n\n---\n\n### 7. 로컬 테스트\n\n```bash\n$ hexo server\n```\n\n+ 내장 서버를 구동 후  **http://localhost:4000**로 접속\n\n\n\n---\n\n### 8. github에 업로드\n\n```bash\n$ hexo deploy 또는 hexo d\n```\n\n+ hexo d 가능\n\n\n\n---\n\n### 9. 블로그 방문\n\n+ 내장서버를 종료해도 https://jhyunb.github.io/로 접속가능\n\n\n\n---\n\n### 10. 테마적용\n\n+ <https://hexo.io/themes/> 에서 원하는 테마 찾기\n\n+ github에서 다운받아 theme폴더에 저장\n\n  ![캡처](https://user-images.githubusercontent.com/36959292/55128335-8e6c2480-5156-11e9-8fb9-1fe599fe5929.PNG)\n\n+ hexo _config.yml 파일 theme: 변경\n+ 테마마다 추가 설정이 다를 수 있으므로 해당 테마 github 확인\n\n---\n\n### 11. Organization을 통한 여러 사용자의 포스팅\n\n![cap7](https://user-images.githubusercontent.com/21974799/55216796-129ad680-5241-11e9-9990-2f04f394dce2.JPG)\n+ 여러 사용자가 같은 프로젝트를 관리하기 위한 그룹 계정인 Organization을 생성 한다.\n\n![cap1](https://user-images.githubusercontent.com/21974799/55216850-3e1dc100-5241-11e9-86ba-422e557ba3bb.JPG)\n+ 올려진 서버를 clone해서 받은 뒤 (이후 pull을 통해서 항상 최신 버전으로 업데이트 한다.)\n\n![cap2](https://user-images.githubusercontent.com/21974799/55216867-54c41800-5241-11e9-8d67-9f08f4651b7e.JPG)\n![cap3](https://user-images.githubusercontent.com/21974799/55216911-71605000-5241-11e9-8e63-5f3c62d10122.JPG)\n![cap4](https://user-images.githubusercontent.com/21974799/55216938-850bb680-5241-11e9-8011-763c8fe24a72.JPG)\n+ 위와 같은 명령어를 쳐서 필요한 것들을 받고\n\n![cap5](https://user-images.githubusercontent.com/21974799/55217019-b97f7280-5241-11e9-9ab2-a3c723454445.JPG)\n![cap6](https://user-images.githubusercontent.com/21974799/55217018-b8e6dc00-5241-11e9-84df-c4d362ea53cf.JPG)\n+ 포스팅 후 배포하면 된다. (로컬 서버를 통해서 제대로 됐는지 확인하고 commit - push를 해주자.)\n","source":"_posts/01-Hexo.md","raw":"---\ntitle: 01_Hexo\ndate: 2019-04-04 14:03:09\ntags: Hexo\ncategories: Hexo\n---\n## HEXO 블로그 만들기\n\n### 1. Node.js와 NPM 설치\n\n+ Node.js\n\n서버 사이드를 JavaScript로 구현할 수 있게 만든 런타임\n\n+ NPM\n\nNode.js기반의 모듈을 모아둔 집합\n\nhttps://nodejs.org/ko/\n\n\n\n---\n\n### 2. Hexo 설치\n\n```bash\n$ npm install -g hexo-cli\n```\n\n\n\n---\n\n### 3. 블로그 생성\n\n생성할 폴더에 접근 후 \n\n```bash\n$ hexo init myBlog\n$ cd myBlog\n$ npm install\n```\n\n![1553361798946](https://user-images.githubusercontent.com/36959292/54869831-83756500-4de1-11e9-97e5-1f472870035f.png)\n\n+ node_modules : 기본적인 node.js 모듈\n+ scaffolds : 페이지를 구성할 기본 markdown 파일\n+ source : 작성한 파일등 리소스\n+ theme : 테마\n+ .gitignore : github에 업로드 할때 제외할 파일 목록 정의\n+ _config.yml : 블로그의 옵션 설정\n\n\n\n---\n\n### 4. github에 연동하기\n\n자동으로 github에 업로드\n\n+ github repo를 만들때 주소를 JHyunB.github.io 로 함 \n\n+ _config.yml 파일 열고 아래처럼 수정\n\n![1553362281981](https://user-images.githubusercontent.com/36959292/54869834-99832580-4de1-11e9-8c4d-fd21267cf69e.png)\n\n\n\n+ 업로드하기 위한 모듈 설치\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\n\n\n+ hexo deploy 명령어 수행시 위에서 작성한 주소로 업로드\n\n\n\n---\n\n### 5. 포스트 생성\n\n```bash\n$ hexo new post first-post\n```\n\nsource/_posts 경로에 myfirstpost.md 생성\n\n\n\n---\n\n### 6. 빌드\n\n```bash\n$ hexo generate 또는 hexo g\n```\n\n+ hexo g 가능\n+ public 폴더가 생성됨\n\n![1553362948919](https://user-images.githubusercontent.com/36959292/54869839-a9026e80-4de1-11e9-8f7f-5cac8c91eaf1.png)\n\n+ 2019 : 포스트는 날짜별로 생성\n+ css : 테마에 맞게 생성\n+ index.html  : myfirstpost가 변경됨\n\n\n\n---\n\n### 7. 로컬 테스트\n\n```bash\n$ hexo server\n```\n\n+ 내장 서버를 구동 후  **http://localhost:4000**로 접속\n\n\n\n---\n\n### 8. github에 업로드\n\n```bash\n$ hexo deploy 또는 hexo d\n```\n\n+ hexo d 가능\n\n\n\n---\n\n### 9. 블로그 방문\n\n+ 내장서버를 종료해도 https://jhyunb.github.io/로 접속가능\n\n\n\n---\n\n### 10. 테마적용\n\n+ <https://hexo.io/themes/> 에서 원하는 테마 찾기\n\n+ github에서 다운받아 theme폴더에 저장\n\n  ![캡처](https://user-images.githubusercontent.com/36959292/55128335-8e6c2480-5156-11e9-8fb9-1fe599fe5929.PNG)\n\n+ hexo _config.yml 파일 theme: 변경\n+ 테마마다 추가 설정이 다를 수 있으므로 해당 테마 github 확인\n\n---\n\n### 11. Organization을 통한 여러 사용자의 포스팅\n\n![cap7](https://user-images.githubusercontent.com/21974799/55216796-129ad680-5241-11e9-9990-2f04f394dce2.JPG)\n+ 여러 사용자가 같은 프로젝트를 관리하기 위한 그룹 계정인 Organization을 생성 한다.\n\n![cap1](https://user-images.githubusercontent.com/21974799/55216850-3e1dc100-5241-11e9-86ba-422e557ba3bb.JPG)\n+ 올려진 서버를 clone해서 받은 뒤 (이후 pull을 통해서 항상 최신 버전으로 업데이트 한다.)\n\n![cap2](https://user-images.githubusercontent.com/21974799/55216867-54c41800-5241-11e9-8d67-9f08f4651b7e.JPG)\n![cap3](https://user-images.githubusercontent.com/21974799/55216911-71605000-5241-11e9-8e63-5f3c62d10122.JPG)\n![cap4](https://user-images.githubusercontent.com/21974799/55216938-850bb680-5241-11e9-8011-763c8fe24a72.JPG)\n+ 위와 같은 명령어를 쳐서 필요한 것들을 받고\n\n![cap5](https://user-images.githubusercontent.com/21974799/55217019-b97f7280-5241-11e9-9ab2-a3c723454445.JPG)\n![cap6](https://user-images.githubusercontent.com/21974799/55217018-b8e6dc00-5241-11e9-84df-c4d362ea53cf.JPG)\n+ 포스팅 후 배포하면 된다. (로컬 서버를 통해서 제대로 됐는지 확인하고 commit - push를 해주자.)\n","slug":"01-Hexo","published":1,"updated":"2019-04-04T05:07:52.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emgma000gw4ulkbulvyot","content":"<h2 id=\"HEXO-블로그-만들기\"><a href=\"#HEXO-블로그-만들기\" class=\"headerlink\" title=\"HEXO 블로그 만들기\"></a>HEXO 블로그 만들기</h2><h3 id=\"1-Node-js와-NPM-설치\"><a href=\"#1-Node-js와-NPM-설치\" class=\"headerlink\" title=\"1. Node.js와 NPM 설치\"></a>1. Node.js와 NPM 설치</h3><ul>\n<li>Node.js</li>\n</ul>\n<p>서버 사이드를 JavaScript로 구현할 수 있게 만든 런타임</p>\n<ul>\n<li>NPM</li>\n</ul>\n<p>Node.js기반의 모듈을 모아둔 집합</p>\n<p><a href=\"https://nodejs.org/ko/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/ko/</a></p>\n<hr>\n<h3 id=\"2-Hexo-설치\"><a href=\"#2-Hexo-설치\" class=\"headerlink\" title=\"2. Hexo 설치\"></a>2. Hexo 설치</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-블로그-생성\"><a href=\"#3-블로그-생성\" class=\"headerlink\" title=\"3. 블로그 생성\"></a>3. 블로그 생성</h3><p>생성할 폴더에 접근 후 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init myBlog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> myBlog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/54869831-83756500-4de1-11e9-97e5-1f472870035f.png\" alt=\"1553361798946\"></p>\n<ul>\n<li>node_modules : 기본적인 node.js 모듈</li>\n<li>scaffolds : 페이지를 구성할 기본 markdown 파일</li>\n<li>source : 작성한 파일등 리소스</li>\n<li>theme : 테마</li>\n<li>.gitignore : github에 업로드 할때 제외할 파일 목록 정의</li>\n<li>_config.yml : 블로그의 옵션 설정</li>\n</ul>\n<hr>\n<h3 id=\"4-github에-연동하기\"><a href=\"#4-github에-연동하기\" class=\"headerlink\" title=\"4. github에 연동하기\"></a>4. github에 연동하기</h3><p>자동으로 github에 업로드</p>\n<ul>\n<li><p>github repo를 만들때 주소를 JHyunB.github.io 로 함 </p>\n</li>\n<li><p>_config.yml 파일 열고 아래처럼 수정</p>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/54869834-99832580-4de1-11e9-8c4d-fd21267cf69e.png\" alt=\"1553362281981\"></p>\n<ul>\n<li>업로드하기 위한 모듈 설치</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo deploy 명령어 수행시 위에서 작성한 주소로 업로드</li>\n</ul>\n<hr>\n<h3 id=\"5-포스트-생성\"><a href=\"#5-포스트-생성\" class=\"headerlink\" title=\"5. 포스트 생성\"></a>5. 포스트 생성</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post first-post</span><br></pre></td></tr></table></figure>\n<p>source/_posts 경로에 myfirstpost.md 생성</p>\n<hr>\n<h3 id=\"6-빌드\"><a href=\"#6-빌드\" class=\"headerlink\" title=\"6. 빌드\"></a>6. 빌드</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate 또는 hexo g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo g 가능</li>\n<li>public 폴더가 생성됨</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/54869839-a9026e80-4de1-11e9-8f7f-5cac8c91eaf1.png\" alt=\"1553362948919\"></p>\n<ul>\n<li>2019 : 포스트는 날짜별로 생성</li>\n<li>css : 테마에 맞게 생성</li>\n<li>index.html  : myfirstpost가 변경됨</li>\n</ul>\n<hr>\n<h3 id=\"7-로컬-테스트\"><a href=\"#7-로컬-테스트\" class=\"headerlink\" title=\"7. 로컬 테스트\"></a>7. 로컬 테스트</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<ul>\n<li>내장 서버를 구동 후  <strong><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></strong>로 접속</li>\n</ul>\n<hr>\n<h3 id=\"8-github에-업로드\"><a href=\"#8-github에-업로드\" class=\"headerlink\" title=\"8. github에 업로드\"></a>8. github에 업로드</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy 또는 hexo d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo d 가능</li>\n</ul>\n<hr>\n<h3 id=\"9-블로그-방문\"><a href=\"#9-블로그-방문\" class=\"headerlink\" title=\"9. 블로그 방문\"></a>9. 블로그 방문</h3><ul>\n<li>내장서버를 종료해도 <a href=\"https://jhyunb.github.io/로\" target=\"_blank\" rel=\"noopener\">https://jhyunb.github.io/로</a> 접속가능</li>\n</ul>\n<hr>\n<h3 id=\"10-테마적용\"><a href=\"#10-테마적용\" class=\"headerlink\" title=\"10. 테마적용\"></a>10. 테마적용</h3><ul>\n<li><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a> 에서 원하는 테마 찾기</p>\n</li>\n<li><p>github에서 다운받아 theme폴더에 저장</p>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/55128335-8e6c2480-5156-11e9-8fb9-1fe599fe5929.PNG\" alt=\"캡처\"></p>\n</li>\n<li><p>hexo _config.yml 파일 theme: 변경</p>\n</li>\n<li>테마마다 추가 설정이 다를 수 있으므로 해당 테마 github 확인</li>\n</ul>\n<hr>\n<h3 id=\"11-Organization을-통한-여러-사용자의-포스팅\"><a href=\"#11-Organization을-통한-여러-사용자의-포스팅\" class=\"headerlink\" title=\"11. Organization을 통한 여러 사용자의 포스팅\"></a>11. Organization을 통한 여러 사용자의 포스팅</h3><p><img src=\"https://user-images.githubusercontent.com/21974799/55216796-129ad680-5241-11e9-9990-2f04f394dce2.JPG\" alt=\"cap7\"></p>\n<ul>\n<li>여러 사용자가 같은 프로젝트를 관리하기 위한 그룹 계정인 Organization을 생성 한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/21974799/55216850-3e1dc100-5241-11e9-86ba-422e557ba3bb.JPG\" alt=\"cap1\"></p>\n<ul>\n<li>올려진 서버를 clone해서 받은 뒤 (이후 pull을 통해서 항상 최신 버전으로 업데이트 한다.)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/21974799/55216867-54c41800-5241-11e9-8d67-9f08f4651b7e.JPG\" alt=\"cap2\"><br><img src=\"https://user-images.githubusercontent.com/21974799/55216911-71605000-5241-11e9-8e63-5f3c62d10122.JPG\" alt=\"cap3\"><br><img src=\"https://user-images.githubusercontent.com/21974799/55216938-850bb680-5241-11e9-8011-763c8fe24a72.JPG\" alt=\"cap4\"></p>\n<ul>\n<li>위와 같은 명령어를 쳐서 필요한 것들을 받고</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/21974799/55217019-b97f7280-5241-11e9-9ab2-a3c723454445.JPG\" alt=\"cap5\"><br><img src=\"https://user-images.githubusercontent.com/21974799/55217018-b8e6dc00-5241-11e9-84df-c4d362ea53cf.JPG\" alt=\"cap6\"></p>\n<ul>\n<li>포스팅 후 배포하면 된다. (로컬 서버를 통해서 제대로 됐는지 확인하고 commit - push를 해주자.)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HEXO-블로그-만들기\"><a href=\"#HEXO-블로그-만들기\" class=\"headerlink\" title=\"HEXO 블로그 만들기\"></a>HEXO 블로그 만들기</h2><h3 id=\"1-Node-js와-NPM-설치\"><a href=\"#1-Node-js와-NPM-설치\" class=\"headerlink\" title=\"1. Node.js와 NPM 설치\"></a>1. Node.js와 NPM 설치</h3><ul>\n<li>Node.js</li>\n</ul>\n<p>서버 사이드를 JavaScript로 구현할 수 있게 만든 런타임</p>\n<ul>\n<li>NPM</li>\n</ul>\n<p>Node.js기반의 모듈을 모아둔 집합</p>\n<p><a href=\"https://nodejs.org/ko/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/ko/</a></p>\n<hr>\n<h3 id=\"2-Hexo-설치\"><a href=\"#2-Hexo-설치\" class=\"headerlink\" title=\"2. Hexo 설치\"></a>2. Hexo 설치</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-블로그-생성\"><a href=\"#3-블로그-생성\" class=\"headerlink\" title=\"3. 블로그 생성\"></a>3. 블로그 생성</h3><p>생성할 폴더에 접근 후 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init myBlog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> myBlog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/54869831-83756500-4de1-11e9-97e5-1f472870035f.png\" alt=\"1553361798946\"></p>\n<ul>\n<li>node_modules : 기본적인 node.js 모듈</li>\n<li>scaffolds : 페이지를 구성할 기본 markdown 파일</li>\n<li>source : 작성한 파일등 리소스</li>\n<li>theme : 테마</li>\n<li>.gitignore : github에 업로드 할때 제외할 파일 목록 정의</li>\n<li>_config.yml : 블로그의 옵션 설정</li>\n</ul>\n<hr>\n<h3 id=\"4-github에-연동하기\"><a href=\"#4-github에-연동하기\" class=\"headerlink\" title=\"4. github에 연동하기\"></a>4. github에 연동하기</h3><p>자동으로 github에 업로드</p>\n<ul>\n<li><p>github repo를 만들때 주소를 JHyunB.github.io 로 함 </p>\n</li>\n<li><p>_config.yml 파일 열고 아래처럼 수정</p>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/54869834-99832580-4de1-11e9-8c4d-fd21267cf69e.png\" alt=\"1553362281981\"></p>\n<ul>\n<li>업로드하기 위한 모듈 설치</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo deploy 명령어 수행시 위에서 작성한 주소로 업로드</li>\n</ul>\n<hr>\n<h3 id=\"5-포스트-생성\"><a href=\"#5-포스트-생성\" class=\"headerlink\" title=\"5. 포스트 생성\"></a>5. 포스트 생성</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post first-post</span><br></pre></td></tr></table></figure>\n<p>source/_posts 경로에 myfirstpost.md 생성</p>\n<hr>\n<h3 id=\"6-빌드\"><a href=\"#6-빌드\" class=\"headerlink\" title=\"6. 빌드\"></a>6. 빌드</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate 또는 hexo g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo g 가능</li>\n<li>public 폴더가 생성됨</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/54869839-a9026e80-4de1-11e9-8f7f-5cac8c91eaf1.png\" alt=\"1553362948919\"></p>\n<ul>\n<li>2019 : 포스트는 날짜별로 생성</li>\n<li>css : 테마에 맞게 생성</li>\n<li>index.html  : myfirstpost가 변경됨</li>\n</ul>\n<hr>\n<h3 id=\"7-로컬-테스트\"><a href=\"#7-로컬-테스트\" class=\"headerlink\" title=\"7. 로컬 테스트\"></a>7. 로컬 테스트</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<ul>\n<li>내장 서버를 구동 후  <strong><a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a></strong>로 접속</li>\n</ul>\n<hr>\n<h3 id=\"8-github에-업로드\"><a href=\"#8-github에-업로드\" class=\"headerlink\" title=\"8. github에 업로드\"></a>8. github에 업로드</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy 또는 hexo d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>hexo d 가능</li>\n</ul>\n<hr>\n<h3 id=\"9-블로그-방문\"><a href=\"#9-블로그-방문\" class=\"headerlink\" title=\"9. 블로그 방문\"></a>9. 블로그 방문</h3><ul>\n<li>내장서버를 종료해도 <a href=\"https://jhyunb.github.io/로\" target=\"_blank\" rel=\"noopener\">https://jhyunb.github.io/로</a> 접속가능</li>\n</ul>\n<hr>\n<h3 id=\"10-테마적용\"><a href=\"#10-테마적용\" class=\"headerlink\" title=\"10. 테마적용\"></a>10. 테마적용</h3><ul>\n<li><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a> 에서 원하는 테마 찾기</p>\n</li>\n<li><p>github에서 다운받아 theme폴더에 저장</p>\n<p><img src=\"https://user-images.githubusercontent.com/36959292/55128335-8e6c2480-5156-11e9-8fb9-1fe599fe5929.PNG\" alt=\"캡처\"></p>\n</li>\n<li><p>hexo _config.yml 파일 theme: 변경</p>\n</li>\n<li>테마마다 추가 설정이 다를 수 있으므로 해당 테마 github 확인</li>\n</ul>\n<hr>\n<h3 id=\"11-Organization을-통한-여러-사용자의-포스팅\"><a href=\"#11-Organization을-통한-여러-사용자의-포스팅\" class=\"headerlink\" title=\"11. Organization을 통한 여러 사용자의 포스팅\"></a>11. Organization을 통한 여러 사용자의 포스팅</h3><p><img src=\"https://user-images.githubusercontent.com/21974799/55216796-129ad680-5241-11e9-9990-2f04f394dce2.JPG\" alt=\"cap7\"></p>\n<ul>\n<li>여러 사용자가 같은 프로젝트를 관리하기 위한 그룹 계정인 Organization을 생성 한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/21974799/55216850-3e1dc100-5241-11e9-86ba-422e557ba3bb.JPG\" alt=\"cap1\"></p>\n<ul>\n<li>올려진 서버를 clone해서 받은 뒤 (이후 pull을 통해서 항상 최신 버전으로 업데이트 한다.)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/21974799/55216867-54c41800-5241-11e9-8d67-9f08f4651b7e.JPG\" alt=\"cap2\"><br><img src=\"https://user-images.githubusercontent.com/21974799/55216911-71605000-5241-11e9-8e63-5f3c62d10122.JPG\" alt=\"cap3\"><br><img src=\"https://user-images.githubusercontent.com/21974799/55216938-850bb680-5241-11e9-8011-763c8fe24a72.JPG\" alt=\"cap4\"></p>\n<ul>\n<li>위와 같은 명령어를 쳐서 필요한 것들을 받고</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/21974799/55217019-b97f7280-5241-11e9-9ab2-a3c723454445.JPG\" alt=\"cap5\"><br><img src=\"https://user-images.githubusercontent.com/21974799/55217018-b8e6dc00-5241-11e9-84df-c4d362ea53cf.JPG\" alt=\"cap6\"></p>\n<ul>\n<li>포스팅 후 배포하면 된다. (로컬 서버를 통해서 제대로 됐는지 확인하고 commit - push를 해주자.)</li>\n</ul>\n"},{"title":"Captcha Solver Study","_content":"# 2019-captcha-solver-study\n\nbased on ML, target is the captcha version 1.0 that is OCR character input for protect the robots.<br> \nwe making the captch-solver by study that start at **2019-03-11** <br>\nMembers, i wrote the above \n\n\n## 💡 Syllabus\n\n### 👉 Background\n\n- [X] pandas, numpy mini project (03/22)\n    * Pandas : `YHKim` \n    * Numpy : `JHBaek`, `DWShin` \n- [X] HEXO blog for presentation the study content (03/29)\n    * HEXO : `JHBaek`, `DWShin` \n- [X] git branch, pull requests, issue template (03/29)\n    * GIT  : `HJPark`, `YHKim`\n- [ ] **advanced Git ( --no-ff option, branch, fast forward, etc..)  (Expected)**\n    * `JHBaek`, `DWShin`, `HJPark`, `YHKim`\n- [ ] MNIST, OCR basic example code \n- [ ] Basing tensorflow code + Mathmatical knowledge\n- [ ] Scrapping for Data collection\n- [ ] Basic web page for Data labeling (if need to JS, include ts,node JS)\n\n### 👉 Project \n\n- [ ] OCR or anti-captcha PAPER seminar\n- [ ] Using by OCR or tesseract ? evaluate score \n- [ ] Using by MNIST evaluate score\n- [ ] Search the another ways for solving a captcha\n\n### 👉 Util \n\n- [ ] Using by `Docker`\n- [ ] PM Tool (not yet determined)\n\n## 💡 Refer\n👉 [📃 awesome-deep-text-detection-recognition](https://github.com/hwalsuklee/awesome-deep-text-detection-recognition?fbclid=IwAR0QwCcC-ns99jlRql7IuSCc3qXaWswKreXdbu2VYun_3q3muXQGvKVmfxk)\n\n## 💡 Rule\n- **Weekly meetings are Thursday** \n- Commit message example : `(verb) (what do you do ) at (file or folder )`<br>\n\n\n\n\n","source":"_posts/captcha-solver-study.md","raw":"---\ntitle: Captcha Solver Study\n---\n# 2019-captcha-solver-study\n\nbased on ML, target is the captcha version 1.0 that is OCR character input for protect the robots.<br> \nwe making the captch-solver by study that start at **2019-03-11** <br>\nMembers, i wrote the above \n\n\n## 💡 Syllabus\n\n### 👉 Background\n\n- [X] pandas, numpy mini project (03/22)\n    * Pandas : `YHKim` \n    * Numpy : `JHBaek`, `DWShin` \n- [X] HEXO blog for presentation the study content (03/29)\n    * HEXO : `JHBaek`, `DWShin` \n- [X] git branch, pull requests, issue template (03/29)\n    * GIT  : `HJPark`, `YHKim`\n- [ ] **advanced Git ( --no-ff option, branch, fast forward, etc..)  (Expected)**\n    * `JHBaek`, `DWShin`, `HJPark`, `YHKim`\n- [ ] MNIST, OCR basic example code \n- [ ] Basing tensorflow code + Mathmatical knowledge\n- [ ] Scrapping for Data collection\n- [ ] Basic web page for Data labeling (if need to JS, include ts,node JS)\n\n### 👉 Project \n\n- [ ] OCR or anti-captcha PAPER seminar\n- [ ] Using by OCR or tesseract ? evaluate score \n- [ ] Using by MNIST evaluate score\n- [ ] Search the another ways for solving a captcha\n\n### 👉 Util \n\n- [ ] Using by `Docker`\n- [ ] PM Tool (not yet determined)\n\n## 💡 Refer\n👉 [📃 awesome-deep-text-detection-recognition](https://github.com/hwalsuklee/awesome-deep-text-detection-recognition?fbclid=IwAR0QwCcC-ns99jlRql7IuSCc3qXaWswKreXdbu2VYun_3q3muXQGvKVmfxk)\n\n## 💡 Rule\n- **Weekly meetings are Thursday** \n- Commit message example : `(verb) (what do you do ) at (file or folder )`<br>\n\n\n\n\n","slug":"captcha-solver-study","published":1,"date":"2019-04-04T02:04:01.774Z","updated":"2019-04-04T04:29:58.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju2emgn60010w4uloaowessd","content":"<h1 id=\"2019-captcha-solver-study\"><a href=\"#2019-captcha-solver-study\" class=\"headerlink\" title=\"2019-captcha-solver-study\"></a>2019-captcha-solver-study</h1><p>based on ML, target is the captcha version 1.0 that is OCR character input for protect the robots.<br><br>we making the captch-solver by study that start at <strong>2019-03-11</strong> <br><br>Members, i wrote the above </p>\n<h2 id=\"💡-Syllabus\"><a href=\"#💡-Syllabus\" class=\"headerlink\" title=\"💡 Syllabus\"></a>💡 Syllabus</h2><h3 id=\"👉-Background\"><a href=\"#👉-Background\" class=\"headerlink\" title=\"👉 Background\"></a>👉 Background</h3><ul>\n<li>[X] pandas, numpy mini project (03/22)<ul>\n<li>Pandas : <code>YHKim</code> </li>\n<li>Numpy : <code>JHBaek</code>, <code>DWShin</code> </li>\n</ul>\n</li>\n<li>[X] HEXO blog for presentation the study content (03/29)<ul>\n<li>HEXO : <code>JHBaek</code>, <code>DWShin</code> </li>\n</ul>\n</li>\n<li>[X] git branch, pull requests, issue template (03/29)<ul>\n<li>GIT  : <code>HJPark</code>, <code>YHKim</code></li>\n</ul>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <strong>advanced Git ( –no-ff option, branch, fast forward, etc..)  (Expected)</strong><ul>\n<li><code>JHBaek</code>, <code>DWShin</code>, <code>HJPark</code>, <code>YHKim</code></li>\n</ul>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> MNIST, OCR basic example code </li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Basing tensorflow code + Mathmatical knowledge</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Scrapping for Data collection</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Basic web page for Data labeling (if need to JS, include ts,node JS)</li>\n</ul>\n<h3 id=\"👉-Project\"><a href=\"#👉-Project\" class=\"headerlink\" title=\"👉 Project\"></a>👉 Project</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> OCR or anti-captcha PAPER seminar</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Using by OCR or tesseract ? evaluate score </li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Using by MNIST evaluate score</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Search the another ways for solving a captcha</li>\n</ul>\n<h3 id=\"👉-Util\"><a href=\"#👉-Util\" class=\"headerlink\" title=\"👉 Util\"></a>👉 Util</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Using by <code>Docker</code></li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> PM Tool (not yet determined)</li>\n</ul>\n<h2 id=\"💡-Refer\"><a href=\"#💡-Refer\" class=\"headerlink\" title=\"💡 Refer\"></a>💡 Refer</h2><p>👉 <a href=\"https://github.com/hwalsuklee/awesome-deep-text-detection-recognition?fbclid=IwAR0QwCcC-ns99jlRql7IuSCc3qXaWswKreXdbu2VYun_3q3muXQGvKVmfxk\" target=\"_blank\" rel=\"noopener\">📃 awesome-deep-text-detection-recognition</a></p>\n<h2 id=\"💡-Rule\"><a href=\"#💡-Rule\" class=\"headerlink\" title=\"💡 Rule\"></a>💡 Rule</h2><ul>\n<li><strong>Weekly meetings are Thursday</strong> </li>\n<li>Commit message example : <code>(verb) (what do you do ) at (file or folder )</code><br></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2019-captcha-solver-study\"><a href=\"#2019-captcha-solver-study\" class=\"headerlink\" title=\"2019-captcha-solver-study\"></a>2019-captcha-solver-study</h1><p>based on ML, target is the captcha version 1.0 that is OCR character input for protect the robots.<br><br>we making the captch-solver by study that start at <strong>2019-03-11</strong> <br><br>Members, i wrote the above </p>\n<h2 id=\"💡-Syllabus\"><a href=\"#💡-Syllabus\" class=\"headerlink\" title=\"💡 Syllabus\"></a>💡 Syllabus</h2><h3 id=\"👉-Background\"><a href=\"#👉-Background\" class=\"headerlink\" title=\"👉 Background\"></a>👉 Background</h3><ul>\n<li>[X] pandas, numpy mini project (03/22)<ul>\n<li>Pandas : <code>YHKim</code> </li>\n<li>Numpy : <code>JHBaek</code>, <code>DWShin</code> </li>\n</ul>\n</li>\n<li>[X] HEXO blog for presentation the study content (03/29)<ul>\n<li>HEXO : <code>JHBaek</code>, <code>DWShin</code> </li>\n</ul>\n</li>\n<li>[X] git branch, pull requests, issue template (03/29)<ul>\n<li>GIT  : <code>HJPark</code>, <code>YHKim</code></li>\n</ul>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <strong>advanced Git ( –no-ff option, branch, fast forward, etc..)  (Expected)</strong><ul>\n<li><code>JHBaek</code>, <code>DWShin</code>, <code>HJPark</code>, <code>YHKim</code></li>\n</ul>\n</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> MNIST, OCR basic example code </li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Basing tensorflow code + Mathmatical knowledge</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Scrapping for Data collection</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Basic web page for Data labeling (if need to JS, include ts,node JS)</li>\n</ul>\n<h3 id=\"👉-Project\"><a href=\"#👉-Project\" class=\"headerlink\" title=\"👉 Project\"></a>👉 Project</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> OCR or anti-captcha PAPER seminar</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Using by OCR or tesseract ? evaluate score </li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Using by MNIST evaluate score</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Search the another ways for solving a captcha</li>\n</ul>\n<h3 id=\"👉-Util\"><a href=\"#👉-Util\" class=\"headerlink\" title=\"👉 Util\"></a>👉 Util</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> Using by <code>Docker</code></li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> PM Tool (not yet determined)</li>\n</ul>\n<h2 id=\"💡-Refer\"><a href=\"#💡-Refer\" class=\"headerlink\" title=\"💡 Refer\"></a>💡 Refer</h2><p>👉 <a href=\"https://github.com/hwalsuklee/awesome-deep-text-detection-recognition?fbclid=IwAR0QwCcC-ns99jlRql7IuSCc3qXaWswKreXdbu2VYun_3q3muXQGvKVmfxk\" target=\"_blank\" rel=\"noopener\">📃 awesome-deep-text-detection-recognition</a></p>\n<h2 id=\"💡-Rule\"><a href=\"#💡-Rule\" class=\"headerlink\" title=\"💡 Rule\"></a>💡 Rule</h2><ul>\n<li><strong>Weekly meetings are Thursday</strong> </li>\n<li>Commit message example : <code>(verb) (what do you do ) at (file or folder )</code><br></li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/01-Kim-Git/2.png","slug":"2.png","post":"cju2emglv0004w4ulm5tjdfsq","modified":0,"renderable":0},{"_id":"source/_posts/01-Kim-Git/3.png","slug":"3.png","post":"cju2emglv0004w4ulm5tjdfsq","modified":0,"renderable":0},{"_id":"source/_posts/02-Park-Git/Git.pdf","slug":"Git.pdf","post":"cju2emgm8000bw4uljh5x4yv1","modified":0,"renderable":0},{"_id":"source/_posts/01-Kim-Git/1.png","slug":"1.png","post":"cju2emglv0004w4ulm5tjdfsq","modified":0,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/ff1.png","slug":"ff1.png","post":"cju2emgly0005w4ul6bg8s549","modified":0,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/ff2.png","slug":"ff2.png","post":"cju2emgly0005w4ul6bg8s549","modified":0,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/ff3.png","slug":"ff3.png","post":"cju2emgly0005w4ul6bg8s549","modified":0,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/nff.png","slug":"nff.png","post":"cju2emgly0005w4ul6bg8s549","modified":0,"renderable":0},{"_id":"source/_posts/03-Hexo/cap1.PNG","slug":"cap1.PNG","post":"cju2emgm20006w4ulx3dvhfzo","modified":0,"renderable":0},{"_id":"source/_posts/03-Hexo/cap2.PNG","slug":"cap2.PNG","post":"cju2emgm20006w4ulx3dvhfzo","modified":0,"renderable":0},{"_id":"source/_posts/03-Hexo/cap3.PNG","slug":"cap3.PNG","post":"cju2emgm20006w4ulx3dvhfzo","modified":0,"renderable":0},{"_id":"source/_posts/03-Hexo/cap4.PNG","slug":"cap4.PNG","post":"cju2emgm20006w4ulx3dvhfzo","modified":0,"renderable":0},{"_id":"source/_posts/03-Hexo/cap5.PNG","slug":"cap5.PNG","post":"cju2emgm20006w4ulx3dvhfzo","modified":0,"renderable":0},{"_id":"source/_posts/03-Hexo/cap6.PNG","slug":"cap6.PNG","post":"cju2emgm20006w4ulx3dvhfzo","modified":0,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/ff4.png","slug":"ff4.png","post":"cju2emgly0005w4ul6bg8s549","modified":1,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/example1.png","slug":"example1.png","post":"cju2emgly0005w4ul6bg8s549","modified":1,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/merge.png","slug":"merge.png","post":"cju2emgly0005w4ul6bg8s549","modified":1,"renderable":0},{"_id":"source/_posts/03-BaekShin-Git/rebase.png","slug":"rebase.png","post":"cju2emgly0005w4ul6bg8s549","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cju2emglb0000w4ulpbt1zejq","category_id":"cju2emgls0002w4ullky2vy7z","_id":"cju2emgm9000cw4ulyiclr9hg"},{"post_id":"cju2emgm6000aw4ulnk8bxfu6","category_id":"cju2emgls0002w4ullky2vy7z","_id":"cju2emgmc000iw4uljbsxwfy1"},{"post_id":"cju2emgln0001w4ulwcak88ps","category_id":"cju2emgm40007w4ul780ipv54","_id":"cju2emgmf000mw4ul4y0ibwvb"},{"post_id":"cju2emgma000gw4ulkbulvyot","category_id":"cju2emgm40007w4ul780ipv54","_id":"cju2emgmg000ow4ulm7lcamth"},{"post_id":"cju2emglv0004w4ulm5tjdfsq","category_id":"cju2emgm9000dw4ulv3lyco3v","_id":"cju2emgmh000rw4ult6gd8b19"},{"post_id":"cju2emgly0005w4ul6bg8s549","category_id":"cju2emgm9000dw4ulv3lyco3v","_id":"cju2emgmj000uw4ultjnmxems"},{"post_id":"cju2emgm20006w4ulx3dvhfzo","category_id":"cju2emgm40007w4ul780ipv54","_id":"cju2emgml000xw4ul5j70uwje"},{"post_id":"cju2emgm8000bw4uljh5x4yv1","category_id":"cju2emgm9000dw4ulv3lyco3v","_id":"cju2emgmt000zw4ul0rkirp5i"}],"PostTag":[{"post_id":"cju2emglb0000w4ulpbt1zejq","tag_id":"cju2emglu0003w4ulvhf545u2","_id":"cju2emgm50009w4ul6huxz28f"},{"post_id":"cju2emgm6000aw4ulnk8bxfu6","tag_id":"cju2emglu0003w4ulvhf545u2","_id":"cju2emgma000fw4ulo01wfhxz"},{"post_id":"cju2emgln0001w4ulwcak88ps","tag_id":"cju2emgm40008w4ulefhgc1go","_id":"cju2emgmb000hw4ul4bhe8ubh"},{"post_id":"cju2emgma000gw4ulkbulvyot","tag_id":"cju2emgm40008w4ulefhgc1go","_id":"cju2emgmd000lw4ulzvb9o0on"},{"post_id":"cju2emglv0004w4ulm5tjdfsq","tag_id":"cju2emgm9000ew4ulgqup9x98","_id":"cju2emgmg000nw4ulp3wx3p9q"},{"post_id":"cju2emgly0005w4ul6bg8s549","tag_id":"cju2emgm9000ew4ulgqup9x98","_id":"cju2emgmi000sw4ul5mspo6b3"},{"post_id":"cju2emgm20006w4ulx3dvhfzo","tag_id":"cju2emgm40008w4ulefhgc1go","_id":"cju2emgmk000ww4ulk088jytn"},{"post_id":"cju2emgm8000bw4uljh5x4yv1","tag_id":"cju2emgm9000ew4ulgqup9x98","_id":"cju2emgmm000yw4ul54mrti0x"}],"Tag":[{"name":"Python","_id":"cju2emglu0003w4ulvhf545u2"},{"name":"Hexo","_id":"cju2emgm40008w4ulefhgc1go"},{"name":"Git","_id":"cju2emgm9000ew4ulgqup9x98"}]}}